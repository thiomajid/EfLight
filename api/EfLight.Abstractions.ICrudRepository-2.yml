### YamlMime:ManagedReference
items:
- uid: EfLight.Abstractions.ICrudRepository`2
  commentId: T:EfLight.Abstractions.ICrudRepository`2
  id: ICrudRepository`2
  parent: EfLight.Abstractions
  children:
  - EfLight.Abstractions.ICrudRepository`2.Add(`0)
  - EfLight.Abstractions.ICrudRepository`2.AddAsync(`0,System.Threading.CancellationToken)
  - EfLight.Abstractions.ICrudRepository`2.AddMany(System.Collections.Generic.IEnumerable{`0})
  - EfLight.Abstractions.ICrudRepository`2.AddManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  - EfLight.Abstractions.ICrudRepository`2.AllAre(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - EfLight.Abstractions.ICrudRepository`2.AllAreAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - EfLight.Abstractions.ICrudRepository`2.Count
  - EfLight.Abstractions.ICrudRepository`2.CountAsync(System.Threading.CancellationToken)
  - EfLight.Abstractions.ICrudRepository`2.CountWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - EfLight.Abstractions.ICrudRepository`2.CountWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  - EfLight.Abstractions.ICrudRepository`2.DeleteById(`1)
  - EfLight.Abstractions.ICrudRepository`2.DeleteByIdAsync(`1,System.Threading.CancellationToken)
  - EfLight.Abstractions.ICrudRepository`2.DeleteWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - EfLight.Abstractions.ICrudRepository`2.DeleteWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  - EfLight.Abstractions.ICrudRepository`2.ExistsWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - EfLight.Abstractions.ICrudRepository`2.ExistsWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - EfLight.Abstractions.ICrudRepository`2.FindById(`1)
  - EfLight.Abstractions.ICrudRepository`2.FindByIdAsync(`1,System.Threading.CancellationToken)
  - EfLight.Abstractions.ICrudRepository`2.FindWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - EfLight.Abstractions.ICrudRepository`2.FindWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  - EfLight.Abstractions.ICrudRepository`2.SaveChanges
  - EfLight.Abstractions.ICrudRepository`2.SaveChangesAsync
  - EfLight.Abstractions.ICrudRepository`2.Update(`0)
  - EfLight.Abstractions.ICrudRepository`2.UpdateMany(System.Collections.Generic.IEnumerable{`0})
  - EfLight.Abstractions.ICrudRepository`2.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})
  - EfLight.Abstractions.ICrudRepository`2.UpdateWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ICrudRepository<TEntity, TKey>
  nameWithType: ICrudRepository<TEntity, TKey>
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>
  type: Interface
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: ICrudRepository
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 7
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  syntax:
    content: 'public interface ICrudRepository<TEntity, in TKey> : ILightRepository where TEntity : class'
    typeParameters:
    - id: TEntity
    - id: TKey
    content.vb: Public Interface ICrudRepository(Of TEntity As Class, In TKey) Inherits ILightRepository
  extensionMethods:
  - EfLight.Abstractions.ICrudRepository`2.EfLight.Extensions.Object.ToOption``1
  nameWithType.vb: ICrudRepository(Of TEntity, TKey)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey)
  name.vb: ICrudRepository(Of TEntity, TKey)
- uid: EfLight.Abstractions.ICrudRepository`2.SaveChanges
  commentId: M:EfLight.Abstractions.ICrudRepository`2.SaveChanges
  id: SaveChanges
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: SaveChanges()
  nameWithType: ICrudRepository<TEntity, TKey>.SaveChanges()
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.SaveChanges()
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: SaveChanges
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 15
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Commits changes to the database.
  example: []
  syntax:
    content: int SaveChanges()
    return:
      type: System.Int32
      description: The number of modified entries.
    content.vb: Function SaveChanges() As Integer
  overload: EfLight.Abstractions.ICrudRepository`2.SaveChanges*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).SaveChanges()
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).SaveChanges()
- uid: EfLight.Abstractions.ICrudRepository`2.SaveChangesAsync
  commentId: M:EfLight.Abstractions.ICrudRepository`2.SaveChangesAsync
  id: SaveChangesAsync
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: SaveChangesAsync()
  nameWithType: ICrudRepository<TEntity, TKey>.SaveChangesAsync()
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.SaveChangesAsync()
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: SaveChangesAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 22
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Commits changes to the database.
  example: []
  syntax:
    content: Task<int> SaveChangesAsync()
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The number of modified entries.
    content.vb: Function SaveChangesAsync() As Task(Of Integer)
  overload: EfLight.Abstractions.ICrudRepository`2.SaveChangesAsync*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).SaveChangesAsync()
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).SaveChangesAsync()
- uid: EfLight.Abstractions.ICrudRepository`2.Count
  commentId: M:EfLight.Abstractions.ICrudRepository`2.Count
  id: Count
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: Count()
  nameWithType: ICrudRepository<TEntity, TKey>.Count()
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Count()
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: Count
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 32
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Counts the number of records in the <code class="typeparamref">TEntity</code> entity's table.
  example: []
  syntax:
    content: long Count()
    return:
      type: System.Int64
    content.vb: Function Count() As Long
  overload: EfLight.Abstractions.ICrudRepository`2.Count*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Count()
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Count()
- uid: EfLight.Abstractions.ICrudRepository`2.CountAsync(System.Threading.CancellationToken)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.CountAsync(System.Threading.CancellationToken)
  id: CountAsync(System.Threading.CancellationToken)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: CountAsync(CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.CountAsync(CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: CountAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 38
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Counts the number of records in the <code class="typeparamref">TEntity</code> entity's table.
  example: []
  syntax:
    content: Task<long> CountAsync(CancellationToken cancellationToken = default)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int64}
    content.vb: Function CountAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Long)
  overload: EfLight.Abstractions.ICrudRepository`2.CountAsync*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountAsync(CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountAsync(System.Threading.CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.CountWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:EfLight.Abstractions.ICrudRepository`2.CountWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: CountWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: CountWhere(Expression<Func<TEntity, bool>>)
  nameWithType: ICrudRepository<TEntity, TKey>.CountWhere(Expression<Func<TEntity, bool>>)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: CountWhere
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 46
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: >-
    Counts the number of records in the <code class="typeparamref">TEntity</code> entity's table

    fulfilling the given <code class="paramref">predicate</code>'s condition.
  example: []
  syntax:
    content: long CountWhere(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: A condition that every <code class="typeparamref">TEntity</code> can fulfill
    return:
      type: System.Int64
    content.vb: Function CountWhere(predicate As Expression(Of Func(Of TEntity, Boolean))) As Long
  overload: EfLight.Abstractions.ICrudRepository`2.CountWhere*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: CountWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.CountWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.CountWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  id: CountWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: CountWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.CountWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: CountWhereAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 54
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: >-
    Counts the number of records in the <code class="typeparamref">TEntity</code> entity's table

    fulfilling the given <code class="paramref">predicate</code>'s condition.
  example: []
  syntax:
    content: Task<long> CountWhereAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int64}
    content.vb: Function CountWhereAsync(predicate As Expression(Of Func(Of TEntity, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Long)
  overload: EfLight.Abstractions.ICrudRepository`2.CountWhereAsync*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  name.vb: CountWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.Add(`0)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.Add(`0)
  id: Add(`0)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: Add(TEntity)
  nameWithType: ICrudRepository<TEntity, TKey>.Add(TEntity)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Add(TEntity)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: Add
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 72
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Persists the given <code class="typeparamref">TEntity</code> entity to the database.
  example: []
  syntax:
    content: EntityEntry<TEntity> Add(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
      description: ''
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}
      description: >-
        <strong>1</strong> if the entity has been saved. Otherwise,

        it will be <strong>0</strong>.
    content.vb: Function Add(entity As TEntity) As EntityEntry(Of TEntity)
  overload: EfLight.Abstractions.ICrudRepository`2.Add*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Add(TEntity)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Add(TEntity)
- uid: EfLight.Abstractions.ICrudRepository`2.AddAsync(`0,System.Threading.CancellationToken)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.AddAsync(`0,System.Threading.CancellationToken)
  id: AddAsync(`0,System.Threading.CancellationToken)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: AddAsync(TEntity, CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.AddAsync(TEntity, CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddAsync(TEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: AddAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 83
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Persists the given <code class="typeparamref">TEntity</code> entity to the database.
  example: []
  syntax:
    content: Task<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
    parameters:
    - id: entity
      type: '{TEntity}'
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}}
      description: >-
        <strong>1</strong> if the entity has been saved. Otherwise,

        it will be <strong>0</strong>.
    content.vb: Function AddAsync(entity As TEntity, cancellationToken As CancellationToken = Nothing) As Task(Of EntityEntry(Of TEntity))
  overload: EfLight.Abstractions.ICrudRepository`2.AddAsync*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddAsync(TEntity, CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddAsync(TEntity, System.Threading.CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.AddMany(System.Collections.Generic.IEnumerable{`0})
  commentId: M:EfLight.Abstractions.ICrudRepository`2.AddMany(System.Collections.Generic.IEnumerable{`0})
  id: AddMany(System.Collections.Generic.IEnumerable{`0})
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: AddMany(IEnumerable<TEntity>)
  nameWithType: ICrudRepository<TEntity, TKey>.AddMany(IEnumerable<TEntity>)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddMany(System.Collections.Generic.IEnumerable<TEntity>)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: AddMany
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 93
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Persists many <code class="typeparamref">TEntity</code> entities to the database.
  example: []
  syntax:
    content: int AddMany(IEnumerable<TEntity> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{{TEntity}}
      description: ''
    return:
      type: System.Int32
      description: The number of added records. If an error occurs, then the function will return 0.
    content.vb: Function AddMany(entities As IEnumerable(Of TEntity)) As Integer
  overload: EfLight.Abstractions.ICrudRepository`2.AddMany*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddMany(IEnumerable(Of TEntity))
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddMany(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: AddMany(IEnumerable(Of TEntity))
- uid: EfLight.Abstractions.ICrudRepository`2.AddManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.AddManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  id: AddManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: AddManyAsync(IEnumerable<TEntity>, CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.AddManyAsync(IEnumerable<TEntity>, CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddManyAsync(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: AddManyAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 96
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  syntax:
    content: Task<int> AddManyAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{{TEntity}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Function AddManyAsync(entities As IEnumerable(Of TEntity), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: EfLight.Abstractions.ICrudRepository`2.AddManyAsync*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddManyAsync(IEnumerable(Of TEntity), CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddManyAsync(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  name.vb: AddManyAsync(IEnumerable(Of TEntity), CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.FindById(`1)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.FindById(`1)
  id: FindById(`1)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: FindById(TKey)
  nameWithType: ICrudRepository<TEntity, TKey>.FindById(TKey)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindById(TKey)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: FindById
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 110
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Finds the <code class="typeparamref">TEntity</code>'s having the given <code class="paramref">id</code>.
  example: []
  syntax:
    content: Option<TEntity> FindById(TKey id)
    parameters:
    - id: id
      type: '{TKey}'
      description: ''
    return:
      type: LanguageExt.Option{{TEntity}}
    content.vb: Function FindById(id As TKey) As [Option](Of TEntity)
  overload: EfLight.Abstractions.ICrudRepository`2.FindById*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindById(TKey)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindById(TKey)
- uid: EfLight.Abstractions.ICrudRepository`2.FindByIdAsync(`1,System.Threading.CancellationToken)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.FindByIdAsync(`1,System.Threading.CancellationToken)
  id: FindByIdAsync(`1,System.Threading.CancellationToken)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: FindByIdAsync(TKey, CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.FindByIdAsync(TKey, CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindByIdAsync(TKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: FindByIdAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 117
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Finds the <code class="typeparamref">TEntity</code>'s having the given <code class="paramref">id</code>.
  example: []
  syntax:
    content: Task<Option<TEntity>> FindByIdAsync(TKey id, CancellationToken cancellationToken = default)
    parameters:
    - id: id
      type: '{TKey}'
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{LanguageExt.Option{{TEntity}}}
    content.vb: Function FindByIdAsync(id As TKey, cancellationToken As CancellationToken = Nothing) As Task(Of [Option](Of TEntity))
  overload: EfLight.Abstractions.ICrudRepository`2.FindByIdAsync*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindByIdAsync(TKey, CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindByIdAsync(TKey, System.Threading.CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.FindWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:EfLight.Abstractions.ICrudRepository`2.FindWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: FindWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: FindWhere(Expression<Func<TEntity, bool>>)
  nameWithType: ICrudRepository<TEntity, TKey>.FindWhere(Expression<Func<TEntity, bool>>)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: FindWhere
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 125
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: >-
    Finds the <strong>first</strong><code class="typeparamref">TEntity</code> entity that matches

    the given <code class="paramref">predicate</code>.
  example: []
  syntax:
    content: Option<TEntity> FindWhere(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: ''
    return:
      type: LanguageExt.Option{{TEntity}}
    content.vb: Function FindWhere(predicate As Expression(Of Func(Of TEntity, Boolean))) As [Option](Of TEntity)
  overload: EfLight.Abstractions.ICrudRepository`2.FindWhere*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: FindWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.FindWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.FindWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  id: FindWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: FindWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.FindWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: FindWhereAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 133
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: >-
    Finds the <strong>first</strong><code class="typeparamref">TEntity</code> entity that matches

    the given <code class="paramref">predicate</code>.
  example: []
  syntax:
    content: Task<Option<TEntity>> FindWhereAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{LanguageExt.Option{{TEntity}}}
    content.vb: Function FindWhereAsync(predicate As Expression(Of Func(Of TEntity, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of [Option](Of TEntity))
  overload: EfLight.Abstractions.ICrudRepository`2.FindWhereAsync*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  name.vb: FindWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.ExistsWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:EfLight.Abstractions.ICrudRepository`2.ExistsWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: ExistsWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: ExistsWhere(Expression<Func<TEntity, bool>>)
  nameWithType: ICrudRepository<TEntity, TKey>.ExistsWhere(Expression<Func<TEntity, bool>>)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.ExistsWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: ExistsWhere
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 148
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: >-
    Checks if at least one <code class="typeparamref">TEntity</code> fullfills the condition of

    the <code class="paramref">predicate</code>.
  example: []
  syntax:
    content: bool ExistsWhere(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: ''
    return:
      type: System.Boolean
    content.vb: Function ExistsWhere(predicate As Expression(Of Func(Of TEntity, Boolean))) As Boolean
  overload: EfLight.Abstractions.ICrudRepository`2.ExistsWhere*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).ExistsWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).ExistsWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: ExistsWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.ExistsWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:EfLight.Abstractions.ICrudRepository`2.ExistsWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: ExistsWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: ExistsWhereAsync(Expression<Func<TEntity, bool>>)
  nameWithType: ICrudRepository<TEntity, TKey>.ExistsWhereAsync(Expression<Func<TEntity, bool>>)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.ExistsWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: ExistsWhereAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 156
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: >-
    Checks if at least one <code class="typeparamref">TEntity</code> fullfills the condition of

    the <code class="paramref">predicate</code>.
  example: []
  syntax:
    content: Task<bool> ExistsWhereAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function ExistsWhereAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task(Of Boolean)
  overload: EfLight.Abstractions.ICrudRepository`2.ExistsWhereAsync*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).ExistsWhereAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).ExistsWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: ExistsWhereAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.AllAre(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:EfLight.Abstractions.ICrudRepository`2.AllAre(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: AllAre(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: AllAre(Expression<Func<TEntity, bool>>)
  nameWithType: ICrudRepository<TEntity, TKey>.AllAre(Expression<Func<TEntity, bool>>)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AllAre(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: AllAre
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 163
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Checks if all TEntity fullfills the given <code class="paramref">predicate</code>
  example: []
  syntax:
    content: bool AllAre(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: ''
    return:
      type: System.Boolean
    content.vb: Function AllAre(predicate As Expression(Of Func(Of TEntity, Boolean))) As Boolean
  overload: EfLight.Abstractions.ICrudRepository`2.AllAre*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AllAre(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AllAre(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: AllAre(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.AllAreAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:EfLight.Abstractions.ICrudRepository`2.AllAreAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: AllAreAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: AllAreAsync(Expression<Func<TEntity, bool>>)
  nameWithType: ICrudRepository<TEntity, TKey>.AllAreAsync(Expression<Func<TEntity, bool>>)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AllAreAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: AllAreAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 170
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Checks if all TEntity fullfills the given <code class="paramref">predicate</code>
  example: []
  syntax:
    content: Task<bool> AllAreAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function AllAreAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task(Of Boolean)
  overload: EfLight.Abstractions.ICrudRepository`2.AllAreAsync*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AllAreAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AllAreAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: AllAreAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteById(`1)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.DeleteById(`1)
  id: DeleteById(`1)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: DeleteById(TKey)
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteById(TKey)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteById(TKey)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: DeleteById
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 184
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Deletes a given <code class="typeparamref">TEntity</code> entity based on its <code class="paramref">id</code>.
  example: []
  syntax:
    content: EntityEntry<TEntity> DeleteById(TKey id)
    parameters:
    - id: id
      type: '{TKey}'
      description: ''
    return:
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}
    content.vb: Function DeleteById(id As TKey) As EntityEntry(Of TEntity)
  overload: EfLight.Abstractions.ICrudRepository`2.DeleteById*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: Thrown if no entry matches the given <code class="paramref">id</code>
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteById(TKey)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteById(TKey)
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteByIdAsync(`1,System.Threading.CancellationToken)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.DeleteByIdAsync(`1,System.Threading.CancellationToken)
  id: DeleteByIdAsync(`1,System.Threading.CancellationToken)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: DeleteByIdAsync(TKey, CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteByIdAsync(TKey, CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteByIdAsync(TKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: DeleteByIdAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 194
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Deletes a given <code class="typeparamref">TEntity</code> entity based on its <code class="paramref">id</code>.
  example: []
  syntax:
    content: Task<EntityEntry<TEntity>> DeleteByIdAsync(TKey id, CancellationToken cancellationToken = default)
    parameters:
    - id: id
      type: '{TKey}'
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}}
    content.vb: Function DeleteByIdAsync(id As TKey, cancellationToken As CancellationToken = Nothing) As Task(Of EntityEntry(Of TEntity))
  overload: EfLight.Abstractions.ICrudRepository`2.DeleteByIdAsync*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: Thrown if no entry matches the given <code class="paramref">id</code>
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteByIdAsync(TKey, CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteByIdAsync(TKey, System.Threading.CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:EfLight.Abstractions.ICrudRepository`2.DeleteWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: DeleteWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: DeleteWhere(Expression<Func<TEntity, bool>>)
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteWhere(Expression<Func<TEntity, bool>>)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: DeleteWhere
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 203
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Deletes one or more <code class="typeparamref">TEntity</code> entities based on the <code class="paramref">predicate</code>.
  example: []
  syntax:
    content: int DeleteWhere(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: ''
    return:
      type: System.Int32
      description: The number of removed rows.
    content.vb: Function DeleteWhere(predicate As Expression(Of Func(Of TEntity, Boolean))) As Integer
  overload: EfLight.Abstractions.ICrudRepository`2.DeleteWhere*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: ''
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  name.vb: DeleteWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.DeleteWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  id: DeleteWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: DeleteWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: DeleteWhereAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 212
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Deletes one or more <code class="typeparamref">TEntity</code> entities based on the <code class="paramref">predicate</code>.
  example: []
  syntax:
    content: Task<int> DeleteWhereAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The number of removed rows.
    content.vb: Function DeleteWhereAsync(predicate As Expression(Of Func(Of TEntity, Boolean)), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
  overload: EfLight.Abstractions.ICrudRepository`2.DeleteWhereAsync*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: ''
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  name.vb: DeleteWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.Update(`0)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.Update(`0)
  id: Update(`0)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: Update(TEntity)
  nameWithType: ICrudRepository<TEntity, TKey>.Update(TEntity)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Update(TEntity)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: Update
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 226
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Updates data related to <code class="typeparamref">TEntity</code>'s entity.
  example: []
  syntax:
    content: int Update(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
      description: ''
    return:
      type: System.Int32
    content.vb: Function Update(entity As TEntity) As Integer
  overload: EfLight.Abstractions.ICrudRepository`2.Update*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Update(TEntity)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Update(TEntity)
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateMany(System.Collections.Generic.IEnumerable{`0})
  commentId: M:EfLight.Abstractions.ICrudRepository`2.UpdateMany(System.Collections.Generic.IEnumerable{`0})
  id: UpdateMany(System.Collections.Generic.IEnumerable{`0})
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: UpdateMany(IEnumerable<TEntity>)
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateMany(IEnumerable<TEntity>)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateMany(System.Collections.Generic.IEnumerable<TEntity>)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: UpdateMany
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 234
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  summary: Updates data related to a set of <code class="typeparamref">TEntity</code> entities.
  example: []
  syntax:
    content: int UpdateMany(IEnumerable<TEntity> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{{TEntity}}
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Function UpdateMany(entities As IEnumerable(Of TEntity)) As Integer
  overload: EfLight.Abstractions.ICrudRepository`2.UpdateMany*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateMany(IEnumerable(Of TEntity))
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateMany(System.Collections.Generic.IEnumerable(Of TEntity))
  name.vb: UpdateMany(IEnumerable(Of TEntity))
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})
  commentId: M:EfLight.Abstractions.ICrudRepository`2.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})
  id: UpdateWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: UpdateWhere(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>)
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateWhere(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>, Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>>>)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: UpdateWhere
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 236
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  syntax:
    content: int UpdateWhere(Expression<Func<TEntity, bool>> predicate, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>> setPropertyCalls)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: setPropertyCalls
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{{TEntity}},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{{TEntity}}}}
    return:
      type: System.Int32
    content.vb: Function UpdateWhere(predicate As Expression(Of Func(Of TEntity, Boolean)), setPropertyCalls As Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity)))) As Integer
  overload: EfLight.Abstractions.ICrudRepository`2.UpdateWhere*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateWhere(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))))
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity), Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity))))
  name.vb: UpdateWhere(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))))
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)
  commentId: M:EfLight.Abstractions.ICrudRepository`2.UpdateWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)
  id: UpdateWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)
  parent: EfLight.Abstractions.ICrudRepository`2
  langs:
  - csharp
  - vb
  name: UpdateWhereAsync(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>, CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateWhereAsync(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>, CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>, Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: EfLight/Abstractions/ICrudRepository.cs
      branch: main
      repo: https://github.com/thiomajid/EfLight.git
    id: UpdateWhereAsync
    path: EfLight/Abstractions/ICrudRepository.cs
    startLine: 241
  assemblies:
  - EfLight
  namespace: EfLight.Abstractions
  syntax:
    content: Task<int> UpdateWhereAsync(Expression<Func<TEntity, bool>> predicate, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>> setPropertyCalls, CancellationToken token = default)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: setPropertyCalls
      type: System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{{TEntity}},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{{TEntity}}}}
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Function UpdateWhereAsync(predicate As Expression(Of Func(Of TEntity, Boolean)), setPropertyCalls As Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))), token As CancellationToken = Nothing) As Task(Of Integer)
  overload: EfLight.Abstractions.ICrudRepository`2.UpdateWhereAsync*
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateWhereAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))), CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity), Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity))), System.Threading.CancellationToken)
  name.vb: UpdateWhereAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))), CancellationToken)
references:
- uid: EfLight.Abstractions
  commentId: N:EfLight.Abstractions
  href: EfLight.html
  name: EfLight.Abstractions
  nameWithType: EfLight.Abstractions
  fullName: EfLight.Abstractions
  spec.csharp:
  - uid: EfLight
    name: EfLight
    href: EfLight.html
  - name: .
  - uid: EfLight.Abstractions
    name: Abstractions
    href: EfLight.Abstractions.html
  spec.vb:
  - uid: EfLight
    name: EfLight
    href: EfLight.html
  - name: .
  - uid: EfLight.Abstractions
    name: Abstractions
    href: EfLight.Abstractions.html
- uid: EfLight.Abstractions.ICrudRepository`2.EfLight.Extensions.Object.ToOption``1
  commentId: M:EfLight.Extensions.Object.ToOption``1(``0)
  parent: EfLight.Extensions.Object
  definition: EfLight.Extensions.Object.ToOption``1(``0)
  href: EfLight.Extensions.Object.html#EfLight_Extensions_Object_ToOption__1___0_
  name: ToOption<ICrudRepository<TEntity, TKey>>(ICrudRepository<TEntity, TKey>)
  nameWithType: Object.ToOption<ICrudRepository<TEntity, TKey>>(ICrudRepository<TEntity, TKey>)
  fullName: EfLight.Extensions.Object.ToOption<EfLight.Abstractions.ICrudRepository<TEntity, TKey>>(EfLight.Abstractions.ICrudRepository<TEntity, TKey>)
  nameWithType.vb: Object.ToOption(Of ICrudRepository(Of TEntity, TKey))(ICrudRepository(Of TEntity, TKey))
  fullName.vb: EfLight.Extensions.Object.ToOption(Of EfLight.Abstractions.ICrudRepository(Of TEntity, TKey))(EfLight.Abstractions.ICrudRepository(Of TEntity, TKey))
  name.vb: ToOption(Of ICrudRepository(Of TEntity, TKey))(ICrudRepository(Of TEntity, TKey))
  spec.csharp:
  - uid: EfLight.Extensions.Object.ToOption``1(EfLight.Abstractions.ICrudRepository{`0,`1})
    name: ToOption
    href: EfLight.Extensions.Object.html#EfLight_Extensions_Object_ToOption__1___0_
  - name: <
  - uid: EfLight.Abstractions.ICrudRepository`2
    name: ICrudRepository
    href: EfLight.Abstractions.ICrudRepository-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: (
  - uid: EfLight.Abstractions.ICrudRepository`2
    name: ICrudRepository
    href: EfLight.Abstractions.ICrudRepository-2.html
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: EfLight.Extensions.Object.ToOption``1(EfLight.Abstractions.ICrudRepository{`0,`1})
    name: ToOption
    href: EfLight.Extensions.Object.html#EfLight_Extensions_Object_ToOption__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: EfLight.Abstractions.ICrudRepository`2
    name: ICrudRepository
    href: EfLight.Abstractions.ICrudRepository-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: (
  - uid: EfLight.Abstractions.ICrudRepository`2
    name: ICrudRepository
    href: EfLight.Abstractions.ICrudRepository-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: EfLight.Extensions.Object.ToOption``1(``0)
  commentId: M:EfLight.Extensions.Object.ToOption``1(``0)
  href: EfLight.Extensions.Object.html#EfLight_Extensions_Object_ToOption__1___0_
  name: ToOption<T>(T)
  nameWithType: Object.ToOption<T>(T)
  fullName: EfLight.Extensions.Object.ToOption<T>(T)
  nameWithType.vb: Object.ToOption(Of T)(T)
  fullName.vb: EfLight.Extensions.Object.ToOption(Of T)(T)
  name.vb: ToOption(Of T)(T)
  spec.csharp:
  - uid: EfLight.Extensions.Object.ToOption``1(``0)
    name: ToOption
    href: EfLight.Extensions.Object.html#EfLight_Extensions_Object_ToOption__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: EfLight.Extensions.Object.ToOption``1(``0)
    name: ToOption
    href: EfLight.Extensions.Object.html#EfLight_Extensions_Object_ToOption__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: EfLight.Extensions.Object
  commentId: T:EfLight.Extensions.Object
  parent: EfLight.Extensions
  href: EfLight.Extensions.Object.html
  name: Object
  nameWithType: Object
  fullName: EfLight.Extensions.Object
- uid: EfLight.Extensions
  commentId: N:EfLight.Extensions
  href: EfLight.html
  name: EfLight.Extensions
  nameWithType: EfLight.Extensions
  fullName: EfLight.Extensions
  spec.csharp:
  - uid: EfLight
    name: EfLight
    href: EfLight.html
  - name: .
  - uid: EfLight.Extensions
    name: Extensions
    href: EfLight.Extensions.html
  spec.vb:
  - uid: EfLight
    name: EfLight
    href: EfLight.html
  - name: .
  - uid: EfLight.Extensions
    name: Extensions
    href: EfLight.Extensions.html
- uid: EfLight.Abstractions.ICrudRepository`2.SaveChanges*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.SaveChanges
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_SaveChanges
  name: SaveChanges
  nameWithType: ICrudRepository<TEntity, TKey>.SaveChanges
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.SaveChanges
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).SaveChanges
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).SaveChanges
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EfLight.Abstractions.ICrudRepository`2.SaveChangesAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.SaveChangesAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_SaveChangesAsync
  name: SaveChangesAsync
  nameWithType: ICrudRepository<TEntity, TKey>.SaveChangesAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.SaveChangesAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).SaveChangesAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).SaveChangesAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: EfLight.Abstractions.ICrudRepository`2.Count*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.Count
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_Count
  name: Count
  nameWithType: ICrudRepository<TEntity, TKey>.Count
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Count
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Count
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Count
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: EfLight.Abstractions.ICrudRepository`2.CountAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.CountAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_CountAsync_System_Threading_CancellationToken_
  name: CountAsync
  nameWithType: ICrudRepository<TEntity, TKey>.CountAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<long>
  nameWithType: Task<long>
  fullName: System.Threading.Tasks.Task<long>
  nameWithType.vb: Task(Of Long)
  fullName.vb: System.Threading.Tasks.Task(Of Long)
  name.vb: Task(Of Long)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: EfLight.Abstractions.ICrudRepository`2.CountWhere*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.CountWhere
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_CountWhere_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  name: CountWhere
  nameWithType: ICrudRepository<TEntity, TKey>.CountWhere
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountWhere
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountWhere
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountWhere
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TEntity, bool>>
  nameWithType: Expression<Func<TEntity, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, bool>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: EfLight.Abstractions.ICrudRepository`2.CountWhereAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.CountWhereAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_CountWhereAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Threading_CancellationToken_
  name: CountWhereAsync
  nameWithType: ICrudRepository<TEntity, TKey>.CountWhereAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountWhereAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountWhereAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountWhereAsync
- uid: EfLight.Abstractions.ICrudRepository`2.Add*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.Add
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_Add__0_
  name: Add
  nameWithType: ICrudRepository<TEntity, TKey>.Add
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Add
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Add
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Add
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{`0}
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  definition: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
  href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking.entityentry-1
  name: EntityEntry<TEntity>
  nameWithType: EntityEntry<TEntity>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity>
  nameWithType.vb: EntityEntry(Of TEntity)
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry(Of TEntity)
  name.vb: EntityEntry(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking.entityentry-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking.entityentry-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking.entityentry-1
  name: EntityEntry<TEntity>
  nameWithType: EntityEntry<TEntity>
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity>
  nameWithType.vb: EntityEntry(Of TEntity)
  fullName.vb: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry(Of TEntity)
  name.vb: EntityEntry(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking.entityentry-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking.entityentry-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.EntityFrameworkCore.ChangeTracking
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.EntityFrameworkCore
    name: EntityFrameworkCore
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore
  - name: .
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking
    name: ChangeTracking
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.EntityFrameworkCore
    name: EntityFrameworkCore
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore
  - name: .
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking
    name: ChangeTracking
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking
- uid: EfLight.Abstractions.ICrudRepository`2.AddAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.AddAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AddAsync__0_System_Threading_CancellationToken_
  name: AddAsync
  nameWithType: ICrudRepository<TEntity, TKey>.AddAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddAsync
- uid: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<EntityEntry<TEntity>>
  nameWithType: Task<EntityEntry<TEntity>>
  fullName: System.Threading.Tasks.Task<Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity>>
  nameWithType.vb: Task(Of EntityEntry(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry(Of TEntity))
  name.vb: Task(Of EntityEntry(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking.entityentry-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1
    name: EntityEntry
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.changetracking.entityentry-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: EfLight.Abstractions.ICrudRepository`2.AddMany*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.AddMany
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AddMany_System_Collections_Generic_IEnumerable__0__
  name: AddMany
  nameWithType: ICrudRepository<TEntity, TKey>.AddMany
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddMany
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddMany
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddMany
- uid: System.Collections.Generic.IEnumerable{{TEntity}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TEntity>
  nameWithType: IEnumerable<TEntity>
  fullName: System.Collections.Generic.IEnumerable<TEntity>
  nameWithType.vb: IEnumerable(Of TEntity)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TEntity)
  name.vb: IEnumerable(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: EfLight.Abstractions.ICrudRepository`2.AddManyAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.AddManyAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AddManyAsync_System_Collections_Generic_IEnumerable__0__System_Threading_CancellationToken_
  name: AddManyAsync
  nameWithType: ICrudRepository<TEntity, TKey>.AddManyAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddManyAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddManyAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddManyAsync
- uid: EfLight.Abstractions.ICrudRepository`2.FindById*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.FindById
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindById__1_
  name: FindById
  nameWithType: ICrudRepository<TEntity, TKey>.FindById
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindById
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindById
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindById
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: LanguageExt.Option{{TEntity}}
  commentId: T:LanguageExt.Option{`0}
  parent: LanguageExt
  definition: LanguageExt.Option`1
  name: Option<TEntity>
  nameWithType: Option<TEntity>
  fullName: LanguageExt.Option<TEntity>
  nameWithType.vb: Option(Of TEntity)
  fullName.vb: LanguageExt.Option(Of TEntity)
  name.vb: Option(Of TEntity)
  spec.csharp:
  - uid: LanguageExt.Option`1
    name: Option
    isExternal: true
  - name: <
  - name: TEntity
  - name: '>'
  spec.vb:
  - uid: LanguageExt.Option`1
    name: Option
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: LanguageExt.Option`1
  commentId: T:LanguageExt.Option`1
  isExternal: true
  name: Option<A>
  nameWithType: Option<A>
  fullName: LanguageExt.Option<A>
  nameWithType.vb: Option(Of A)
  fullName.vb: LanguageExt.Option(Of A)
  name.vb: Option(Of A)
  spec.csharp:
  - uid: LanguageExt.Option`1
    name: Option
    isExternal: true
  - name: <
  - name: A
  - name: '>'
  spec.vb:
  - uid: LanguageExt.Option`1
    name: Option
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: A
  - name: )
- uid: LanguageExt
  commentId: N:LanguageExt
  isExternal: true
  name: LanguageExt
  nameWithType: LanguageExt
  fullName: LanguageExt
- uid: EfLight.Abstractions.ICrudRepository`2.FindByIdAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.FindByIdAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindByIdAsync__1_System_Threading_CancellationToken_
  name: FindByIdAsync
  nameWithType: ICrudRepository<TEntity, TKey>.FindByIdAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindByIdAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindByIdAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindByIdAsync
- uid: System.Threading.Tasks.Task{LanguageExt.Option{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{LanguageExt.Option{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Option<TEntity>>
  nameWithType: Task<Option<TEntity>>
  fullName: System.Threading.Tasks.Task<LanguageExt.Option<TEntity>>
  nameWithType.vb: Task(Of Option(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of LanguageExt.Option(Of TEntity))
  name.vb: Task(Of Option(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: LanguageExt.Option`1
    name: Option
    isExternal: true
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: LanguageExt.Option`1
    name: Option
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
- uid: EfLight.Abstractions.ICrudRepository`2.FindWhere*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.FindWhere
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindWhere_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  name: FindWhere
  nameWithType: ICrudRepository<TEntity, TKey>.FindWhere
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindWhere
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindWhere
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindWhere
- uid: EfLight.Abstractions.ICrudRepository`2.FindWhereAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.FindWhereAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindWhereAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Threading_CancellationToken_
  name: FindWhereAsync
  nameWithType: ICrudRepository<TEntity, TKey>.FindWhereAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindWhereAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindWhereAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindWhereAsync
- uid: EfLight.Abstractions.ICrudRepository`2.ExistsWhere*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.ExistsWhere
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_ExistsWhere_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  name: ExistsWhere
  nameWithType: ICrudRepository<TEntity, TKey>.ExistsWhere
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.ExistsWhere
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).ExistsWhere
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).ExistsWhere
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: EfLight.Abstractions.ICrudRepository`2.ExistsWhereAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.ExistsWhereAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_ExistsWhereAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  name: ExistsWhereAsync
  nameWithType: ICrudRepository<TEntity, TKey>.ExistsWhereAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.ExistsWhereAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).ExistsWhereAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).ExistsWhereAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: EfLight.Abstractions.ICrudRepository`2.AllAre*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.AllAre
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AllAre_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  name: AllAre
  nameWithType: ICrudRepository<TEntity, TKey>.AllAre
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AllAre
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AllAre
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AllAre
- uid: EfLight.Abstractions.ICrudRepository`2.AllAreAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.AllAreAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AllAreAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  name: AllAreAsync
  nameWithType: ICrudRepository<TEntity, TKey>.AllAreAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AllAreAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AllAreAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AllAreAsync
- uid: System.NullReferenceException
  commentId: T:System.NullReferenceException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullreferenceexception
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteById*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.DeleteById
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteById__1_
  name: DeleteById
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteById
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteById
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteById
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteById
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteByIdAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.DeleteByIdAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteByIdAsync__1_System_Threading_CancellationToken_
  name: DeleteByIdAsync
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteByIdAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteByIdAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteByIdAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteByIdAsync
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteWhere*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.DeleteWhere
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteWhere_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  name: DeleteWhere
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteWhere
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteWhere
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteWhere
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteWhere
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteWhereAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.DeleteWhereAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteWhereAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Threading_CancellationToken_
  name: DeleteWhereAsync
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteWhereAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteWhereAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteWhereAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteWhereAsync
- uid: EfLight.Abstractions.ICrudRepository`2.Update*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.Update
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_Update__0_
  name: Update
  nameWithType: ICrudRepository<TEntity, TKey>.Update
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Update
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Update
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Update
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateMany*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.UpdateMany
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_UpdateMany_System_Collections_Generic_IEnumerable__0__
  name: UpdateMany
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateMany
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateMany
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateMany
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateMany
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateWhere*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.UpdateWhere
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_UpdateWhere_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Linq_Expressions_Expression_System_Func_Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__0__Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__0____
  name: UpdateWhere
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateWhere
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateWhere
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateWhere
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateWhere
- uid: System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{{TEntity}},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{{TEntity}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>
  nameWithType: Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>, Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>>>
  nameWithType.vb: Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity), Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity)))
  name.vb: Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: Microsoft.EntityFrameworkCore.Query.SetPropertyCalls`1
    name: SetPropertyCalls
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.query.setpropertycalls-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: ','
  - name: " "
  - uid: Microsoft.EntityFrameworkCore.Query.SetPropertyCalls`1
    name: SetPropertyCalls
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.query.setpropertycalls-1
  - name: <
  - name: TEntity
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.EntityFrameworkCore.Query.SetPropertyCalls`1
    name: SetPropertyCalls
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.query.setpropertycalls-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: ','
  - name: " "
  - uid: Microsoft.EntityFrameworkCore.Query.SetPropertyCalls`1
    name: SetPropertyCalls
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.query.setpropertycalls-1
  - name: (
  - name: Of
  - name: " "
  - name: TEntity
  - name: )
  - name: )
  - name: )
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateWhereAsync*
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.UpdateWhereAsync
  href: EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_UpdateWhereAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Linq_Expressions_Expression_System_Func_Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__0__Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__0____System_Threading_CancellationToken_
  name: UpdateWhereAsync
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateWhereAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateWhereAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateWhereAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateWhereAsync
