{
  "README.html": {
    "href": "README.html",
    "title": "EfLight ðŸª¶ | EfLight",
    "keywords": "EfLight ðŸª¶ Goal EfLight's goal is to provide a simple API to use EF Core in order to avoid the boilerplate code required for most basic operations with EF Core. It provides two base classes: CrudRepository : which as its name implies, provides most basic operations for CRUD. PagingAndSortingRepository: it extends CrudRepository and provides pagination features on top of existing features of CrudRepository. Getting started Suppose that we have an entity class named Student and our DbContext is already configured. [Table(\"Student\")] class Student { [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public int Id { get; set; } public string? FirstName { get; set; } public string? LastName { get; set; } [DataType(DataType.Date)] public DateTime BirthDate { get; set; } } To interact with the table, just create a repository class which extends whether CrudRepository or PagingAndSortingRepository (the choice depends on your requirements) with its corresponding interface that will be injected in other classes. public interface IStudentRepository : ICrudRepository<Student, int> { } class StudentRepository : CrudRepository<YourDbContext, Student, int>, IStudentRepository { public StudentRepository(YourDbContext context) : base(context) { } } Then in Program.cs, you can register all of your repositories using: builder.Services.AddEfLight<Program>(); Usage All you have to do is to inject it where it is needed. For example: public class StudentService { private readonly IStudentRepository _repository; public StudentService(IStudentRepository repository) { _repository = repository; } public void CheckIfAllAboveAge(int age) { bool result = _repository.ExistsWhere(x => x.BirthData.Year > age); // Your business logic } public Student? FindByName(string name) { Student? student; Optional<Student> result = _repository.FindWhere(x => x.LastName == name); // Throws the exception if the result is null student = result.OrElseThrow(() => new Exception()); // Instead of throwing an exception, you can also do result.IfNullThen(() => { student = _repository.FindWhere(x => x.FirstName == name); }); return student; } } Custom queries You can also provide more features to your repository classes depending on your use cases. Just use an interface defining the contract and provide your own implementation of that use case. public interface IStudentRepository : ICrudRepository<Student, int> { void UpsertById(int studentId); } In the repository class, you'll have: class StudentRepository : CrudRepository<Student, int>, IStudentRepository { public StudentRepository(YourDbContext context) : base(context) { } public void UpsertById(int studentId) { // Your implementation } } Lifetime When you register your repositories, you can specify the lifetime of your repositories. By default, it is set to ServiceLifetime.Scoped, but you can provide your default lifetime using: builder.Services.AddEfLight<Program>(options => { options.DefaultLifetime = ServiceLifetime.Scoped; }); On top of that, you can specify the lifetime of each repository using RepositoryLifetime attribute on the repository class: [RepositoryLifetime(ServiceLifetime.Scoped)] public class StudentRepository : CrudRepository<YourDbContext, Student, int>, IStudentRepository { public StudentRepository(YourDbContext context) : base(context) { } } PS Want to contribute ? Feel free to open pull requests."
  },
  "documentation/api/EfLight.Abstractions.ICrudRepository-2.html": {
    "href": "documentation/api/EfLight.Abstractions.ICrudRepository-2.html",
    "title": "Interface ICrudRepository<TEntity, TKey> | EfLight",
    "keywords": "Interface ICrudRepository<TEntity, TKey> Namespace EfLight.Abstractions Assembly EfLight.dll public interface ICrudRepository<TEntity, in TKey> : ILightRepository where TEntity : class Type Parameters TEntity TKey Extension Methods Object.ToOption<T>(T?) Methods Add(TEntity) Persists the given TEntity entity to the database. EntityEntry<TEntity> Add(TEntity entity) Parameters entity TEntity Returns EntityEntry<TEntity> 1 if the entity has been saved. Otherwise, it will be 0. AddAsync(TEntity, CancellationToken) Persists the given TEntity entity to the database. Task<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity cancellationToken CancellationToken Returns Task<EntityEntry<TEntity>> 1 if the entity has been saved. Otherwise, it will be 0. AddMany(IEnumerable<TEntity>) Persists many TEntity entities to the database. int AddMany(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> Returns int The number of added records. If an error occurs, then the function will return 0. AddManyAsync(IEnumerable<TEntity>, CancellationToken) Task<int> AddManyAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default) Parameters entities IEnumerable<TEntity> cancellationToken CancellationToken Returns Task<int> AllAre(Expression<Func<TEntity, bool>>) Checks if all TEntity fullfills the given predicate bool AllAre(Expression<Func<TEntity, bool>> predicate) Parameters predicate Expression<Func<TEntity, bool>> Returns bool AllAreAsync(Expression<Func<TEntity, bool>>) Checks if all TEntity fullfills the given predicate Task<bool> AllAreAsync(Expression<Func<TEntity, bool>> predicate) Parameters predicate Expression<Func<TEntity, bool>> Returns Task<bool> Count() Counts the number of records in the TEntity entity's table. long Count() Returns long CountAsync(CancellationToken) Counts the number of records in the TEntity entity's table. Task<long> CountAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<long> CountWhere(Expression<Func<TEntity, bool>>) Counts the number of records in the TEntity entity's table fulfilling the given predicate's condition. long CountWhere(Expression<Func<TEntity, bool>> predicate) Parameters predicate Expression<Func<TEntity, bool>> A condition that every TEntity can fulfill Returns long CountWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) Counts the number of records in the TEntity entity's table fulfilling the given predicate's condition. Task<long> CountWhereAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> cancellationToken CancellationToken Returns Task<long> DeleteById(TKey) Deletes a given TEntity entity based on its id. EntityEntry<TEntity> DeleteById(TKey id) Parameters id TKey Returns EntityEntry<TEntity> Exceptions NullReferenceException Thrown if no entry matches the given id DeleteByIdAsync(TKey, CancellationToken) Deletes a given TEntity entity based on its id. Task<EntityEntry<TEntity>> DeleteByIdAsync(TKey id, CancellationToken cancellationToken = default) Parameters id TKey cancellationToken CancellationToken Returns Task<EntityEntry<TEntity>> Exceptions NullReferenceException Thrown if no entry matches the given id DeleteWhere(Expression<Func<TEntity, bool>>) Deletes one or more TEntity entities based on the predicate. int DeleteWhere(Expression<Func<TEntity, bool>> predicate) Parameters predicate Expression<Func<TEntity, bool>> Returns int The number of removed rows. Exceptions NullReferenceException DeleteWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) Deletes one or more TEntity entities based on the predicate. Task<int> DeleteWhereAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> cancellationToken CancellationToken Returns Task<int> The number of removed rows. Exceptions NullReferenceException ExistsWhere(Expression<Func<TEntity, bool>>) Checks if at least one TEntity fullfills the condition of the predicate. bool ExistsWhere(Expression<Func<TEntity, bool>> predicate) Parameters predicate Expression<Func<TEntity, bool>> Returns bool ExistsWhereAsync(Expression<Func<TEntity, bool>>) Checks if at least one TEntity fullfills the condition of the predicate. Task<bool> ExistsWhereAsync(Expression<Func<TEntity, bool>> predicate) Parameters predicate Expression<Func<TEntity, bool>> Returns Task<bool> FindById(TKey) Finds the TEntity's having the given id. Option<TEntity> FindById(TKey id) Parameters id TKey Returns Option<TEntity> FindByIdAsync(TKey, CancellationToken) Finds the TEntity's having the given id. Task<Option<TEntity>> FindByIdAsync(TKey id, CancellationToken cancellationToken = default) Parameters id TKey cancellationToken CancellationToken Returns Task<Option<TEntity>> FindWhere(Expression<Func<TEntity, bool>>) Finds the firstTEntity entity that matches the given predicate. Option<TEntity> FindWhere(Expression<Func<TEntity, bool>> predicate) Parameters predicate Expression<Func<TEntity, bool>> Returns Option<TEntity> FindWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) Finds the firstTEntity entity that matches the given predicate. Task<Option<TEntity>> FindWhereAsync(Expression<Func<TEntity, bool>> predicate, CancellationToken cancellationToken = default) Parameters predicate Expression<Func<TEntity, bool>> cancellationToken CancellationToken Returns Task<Option<TEntity>> SaveChanges() Commits changes to the database. int SaveChanges() Returns int The number of modified entries. SaveChangesAsync() Commits changes to the database. Task<int> SaveChangesAsync() Returns Task<int> The number of modified entries. Update(TEntity) Updates data related to TEntity's entity. int Update(TEntity entity) Parameters entity TEntity Returns int UpdateMany(IEnumerable<TEntity>) Updates data related to a set of TEntity entities. int UpdateMany(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> Returns int UpdateWhere(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>) int UpdateWhere(Expression<Func<TEntity, bool>> predicate, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>> setPropertyCalls) Parameters predicate Expression<Func<TEntity, bool>> setPropertyCalls Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>> Returns int UpdateWhereAsync(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>, CancellationToken) Task<int> UpdateWhereAsync(Expression<Func<TEntity, bool>> predicate, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>> setPropertyCalls, CancellationToken token = default) Parameters predicate Expression<Func<TEntity, bool>> setPropertyCalls Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>> token CancellationToken Returns Task<int>"
  },
  "documentation/api/EfLight.Abstractions.ILightRepository.html": {
    "href": "documentation/api/EfLight.Abstractions.ILightRepository.html",
    "title": "Interface ILightRepository | EfLight",
    "keywords": "Interface ILightRepository Namespace EfLight.Abstractions Assembly EfLight.dll public interface ILightRepository Extension Methods Object.ToOption<T>(T?)"
  },
  "documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html": {
    "href": "documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html",
    "title": "Interface IPagingAndSortingRepository<TEntity, TKey> | EfLight",
    "keywords": "Interface IPagingAndSortingRepository<TEntity, TKey> Namespace EfLight.Abstractions Assembly EfLight.dll public interface IPagingAndSortingRepository<TEntity, TKey> : ICrudRepository<TEntity, TKey>, ILightRepository where TEntity : class Type Parameters TEntity TKey Inherited Members ICrudRepository<TEntity, TKey>.SaveChanges() ICrudRepository<TEntity, TKey>.SaveChangesAsync() ICrudRepository<TEntity, TKey>.Count() ICrudRepository<TEntity, TKey>.CountAsync(CancellationToken) ICrudRepository<TEntity, TKey>.CountWhere(Expression<Func<TEntity, bool>>) ICrudRepository<TEntity, TKey>.CountWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) ICrudRepository<TEntity, TKey>.Add(TEntity) ICrudRepository<TEntity, TKey>.AddAsync(TEntity, CancellationToken) ICrudRepository<TEntity, TKey>.AddMany(IEnumerable<TEntity>) ICrudRepository<TEntity, TKey>.AddManyAsync(IEnumerable<TEntity>, CancellationToken) ICrudRepository<TEntity, TKey>.FindById(TKey) ICrudRepository<TEntity, TKey>.FindByIdAsync(TKey, CancellationToken) ICrudRepository<TEntity, TKey>.FindWhere(Expression<Func<TEntity, bool>>) ICrudRepository<TEntity, TKey>.FindWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) ICrudRepository<TEntity, TKey>.ExistsWhere(Expression<Func<TEntity, bool>>) ICrudRepository<TEntity, TKey>.ExistsWhereAsync(Expression<Func<TEntity, bool>>) ICrudRepository<TEntity, TKey>.AllAre(Expression<Func<TEntity, bool>>) ICrudRepository<TEntity, TKey>.AllAreAsync(Expression<Func<TEntity, bool>>) ICrudRepository<TEntity, TKey>.DeleteById(TKey) ICrudRepository<TEntity, TKey>.DeleteByIdAsync(TKey, CancellationToken) ICrudRepository<TEntity, TKey>.DeleteWhere(Expression<Func<TEntity, bool>>) ICrudRepository<TEntity, TKey>.DeleteWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) ICrudRepository<TEntity, TKey>.Update(TEntity) ICrudRepository<TEntity, TKey>.UpdateMany(IEnumerable<TEntity>) ICrudRepository<TEntity, TKey>.UpdateWhere(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>) ICrudRepository<TEntity, TKey>.UpdateWhereAsync(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>, CancellationToken) Extension Methods Object.ToOption<T>(T?) Methods FindAll(PaginationRequest, bool) Returns a given set of at most PageSize of TEntity IEnumerable<TEntity> FindAll(PaginationRequest page, bool track = false) Parameters page PaginationRequest track bool Returns IEnumerable<TEntity> FindAll(PaginationRequest, Expression<Func<TEntity, bool>>, bool) Returns a given set of at most PageSize of TEntity that matches the provided predicateFn. IEnumerable<TEntity> FindAll(PaginationRequest page, Expression<Func<TEntity, bool>> predicateFn, bool track = false) Parameters page PaginationRequest predicateFn Expression<Func<TEntity, bool>> track bool Returns IEnumerable<TEntity> FindAll(bool) Retrives all records held in TEntity entity's table. IEnumerable<TEntity> FindAll(bool track = false) Parameters track bool Returns IEnumerable<TEntity> FindAllAsync(PaginationRequest, bool, CancellationToken) Returns a given set of at most page.offset of TEntity fullfilling the given predicateFn condition. Task<IEnumerable<TEntity>> FindAllAsync(PaginationRequest page, bool track = false, CancellationToken cancellationToken = default) Parameters page PaginationRequest track bool cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> FindAllAsync(PaginationRequest, Expression<Func<TEntity, bool>>, bool, CancellationToken) Returns a given set of at most page.offset of TEntity fullfilling the given predicateFn condition. Task<IEnumerable<TEntity>> FindAllAsync(PaginationRequest page, Expression<Func<TEntity, bool>> predicateFn, bool track = false, CancellationToken cancellationToken = default) Parameters page PaginationRequest predicateFn Expression<Func<TEntity, bool>> track bool cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> FindAllAsync(bool, CancellationToken) Retrives all records held in TEntity entity's table. Task<IEnumerable<TEntity>> FindAllAsync(bool track = false, CancellationToken cancellationToken = default) Parameters track bool cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken) Returns a given set of at most PageSize of TEntity that matches the provided predicateFn and ordered by TOrderKey Task<IEnumerable<TEntity>> FindAllAsync<TOrderKey>(PaginationRequest page, Expression<Func<TEntity, bool>> predicateFn, Expression<Func<TEntity, TOrderKey>> orderKey, SortDirection sort = SortDirection.Ascending, bool track = false, CancellationToken cancellationToken = default) Parameters page PaginationRequest predicateFn Expression<Func<TEntity, bool>> orderKey Expression<Func<TEntity, TOrderKey>> sort SortDirection track bool cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> Type Parameters TOrderKey FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken) Returns a given set of at most PageSize of TEntity ordered by TOrderKey. Task<IEnumerable<TEntity>> FindAllAsync<TOrderKey>(PaginationRequest page, Expression<Func<TEntity, TOrderKey>> orderKey, SortDirection sort = SortDirection.Ascending, bool track = false, CancellationToken cancellationToken = default) Parameters page PaginationRequest orderKey Expression<Func<TEntity, TOrderKey>> sort SortDirection track bool cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> Type Parameters TOrderKey FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool) Returns a given set of at most PageSize of TEntity that matches the provided predicateFn and ordered by TOrderKey IEnumerable<TEntity> FindAll<TOrderKey>(PaginationRequest page, Expression<Func<TEntity, bool>> predicateFn, Expression<Func<TEntity, TOrderKey>> orderKey, SortDirection sort = SortDirection.Ascending, bool track = false) Parameters page PaginationRequest predicateFn Expression<Func<TEntity, bool>> orderKey Expression<Func<TEntity, TOrderKey>> sort SortDirection track bool Returns IEnumerable<TEntity> Type Parameters TOrderKey FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool) Returns a given set of at most PageSize of TEntity ordered by TOrderKey. IEnumerable<TEntity> FindAll<TOrderKey>(PaginationRequest page, Expression<Func<TEntity, TOrderKey>> orderKey, SortDirection sort = SortDirection.Ascending, bool track = false) Parameters page PaginationRequest orderKey Expression<Func<TEntity, TOrderKey>> sort SortDirection track bool Returns IEnumerable<TEntity> Type Parameters TOrderKey"
  },
  "documentation/api/EfLight.Abstractions.html": {
    "href": "documentation/api/EfLight.Abstractions.html",
    "title": "Namespace EfLight.Abstractions | EfLight",
    "keywords": "Namespace EfLight.Abstractions Interfaces ICrudRepository<TEntity, TKey> ILightRepository IPagingAndSortingRepository<TEntity, TKey>"
  },
  "documentation/api/EfLight.Attributes.RepositoryLifetimeAttribute.html": {
    "href": "documentation/api/EfLight.Attributes.RepositoryLifetimeAttribute.html",
    "title": "Class RepositoryLifetimeAttribute | EfLight",
    "keywords": "Class RepositoryLifetimeAttribute Namespace EfLight.Attributes Assembly EfLight.dll Used during services registration to indicate the lifetime of the repository. [AttributeUsage(AttributeTargets.Class, Inherited = false)] public sealed class RepositoryLifetimeAttribute : Attribute Inheritance object Attribute RepositoryLifetimeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods Object.ToOption<T>(T?) Constructors RepositoryLifetimeAttribute(ServiceLifetime) public RepositoryLifetimeAttribute(ServiceLifetime lifetime) Parameters lifetime ServiceLifetime Properties Lifetime public ServiceLifetime Lifetime { get; set; } Property Value ServiceLifetime"
  },
  "documentation/api/EfLight.Attributes.html": {
    "href": "documentation/api/EfLight.Attributes.html",
    "title": "Namespace EfLight.Attributes | EfLight",
    "keywords": "Namespace EfLight.Attributes Classes RepositoryLifetimeAttribute Used during services registration to indicate the lifetime of the repository."
  },
  "documentation/api/EfLight.Common.PaginationRequest.html": {
    "href": "documentation/api/EfLight.Common.PaginationRequest.html",
    "title": "Class PaginationRequest | EfLight",
    "keywords": "Class PaginationRequest Namespace EfLight.Common Assembly EfLight.dll Configures the number of table entries queried for a pagination request. With this record (Index * Offset) + Offset table entries are retrieved for each request. public record PaginationRequest : IEquatable<PaginationRequest> Inheritance object PaginationRequest Implements IEquatable<PaginationRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Object.ToOption<T>(T?) Constructors PaginationRequest(int, int) Configures the number of table entries queried for a pagination request. With this record (Index * Offset) + Offset table entries are retrieved for each request. public PaginationRequest(int Index, int Offset) Parameters Index int The Index of the requested page. Offset int The number of entries retrieved. Properties Index The Index of the requested page. public int Index { get; init; } Property Value int Offset The number of entries retrieved. public int Offset { get; init; } Property Value int Skip public int Skip { get; } Property Value int"
  },
  "documentation/api/EfLight.Common.SortDirection.html": {
    "href": "documentation/api/EfLight.Common.SortDirection.html",
    "title": "Enum SortDirection | EfLight",
    "keywords": "Enum SortDirection Namespace EfLight.Common Assembly EfLight.dll Defines the sort direction when using methods from IPagingAndSortingRepository<TEntity, TKey>. public enum SortDirection Fields Ascending = 0 Descending = 1"
  },
  "documentation/api/EfLight.Common.html": {
    "href": "documentation/api/EfLight.Common.html",
    "title": "Namespace EfLight.Common | EfLight",
    "keywords": "Namespace EfLight.Common Classes PaginationRequest Configures the number of table entries queried for a pagination request. With this record (Index * Offset) + Offset table entries are retrieved for each request. Enums SortDirection Defines the sort direction when using methods from IPagingAndSortingRepository<TEntity, TKey>."
  },
  "documentation/api/EfLight.Core.CrudRepository-3.html": {
    "href": "documentation/api/EfLight.Core.CrudRepository-3.html",
    "title": "Class CrudRepository<TContext, TEntity, TKey> | EfLight",
    "keywords": "Class CrudRepository<TContext, TEntity, TKey> Namespace EfLight.Core Assembly EfLight.dll public abstract class CrudRepository<TContext, TEntity, TKey> : LightRepository<TContext>, ICrudRepository<TEntity, TKey>, ILightRepository where TContext : DbContext where TEntity : class Type Parameters TContext TEntity TKey Inheritance object LightRepository<TContext> CrudRepository<TContext, TEntity, TKey> Implements ICrudRepository<TEntity, TKey> ILightRepository Derived PagingAndSortingRepository<TContext, TEntity, TKey> Inherited Members LightRepository<TContext>._context object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Object.ToOption<T>(T?) Constructors CrudRepository(TContext) protected CrudRepository(TContext context) Parameters context TContext Methods Add(TEntity) Persists the given TEntity entity to the database. public virtual EntityEntry<TEntity> Add(TEntity entity) Parameters entity TEntity Returns EntityEntry<TEntity> AddAsync(TEntity, CancellationToken) Persists the given TEntity entity to the database. public virtual Task<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default) Parameters entity TEntity cancellationToken CancellationToken Returns Task<EntityEntry<TEntity>> AddMany(IEnumerable<TEntity>) Persists many TEntity entities to the database. public virtual int AddMany(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> Returns int The number of added records. If an error occurs, then the function will return 0. AddManyAsync(IEnumerable<TEntity>, CancellationToken) Persists many TEntity entities to the database. public virtual Task<int> AddManyAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default) Parameters entities IEnumerable<TEntity> cancellationToken CancellationToken Returns Task<int> The number of added records. If an error occurs, then the function will return 0. AllAre(Expression<Func<TEntity, bool>>) Checks if all TEntity fullfills the given predicateFn public virtual bool AllAre(Expression<Func<TEntity, bool>> predicateFn) Parameters predicateFn Expression<Func<TEntity, bool>> Returns bool AllAreAsync(Expression<Func<TEntity, bool>>) Checks if all TEntity fullfills the given predicateFn public virtual Task<bool> AllAreAsync(Expression<Func<TEntity, bool>> predicateFn) Parameters predicateFn Expression<Func<TEntity, bool>> Returns Task<bool> Count() Counts the number of records in the TEntity entity's table. public virtual long Count() Returns long CountAsync(CancellationToken) Counts the number of records in the TEntity entity's table. public virtual Task<long> CountAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<long> CountWhere(Expression<Func<TEntity, bool>>) Counts the number of records in the TEntity entity's table fullfilling the given predicateFn's condition. public virtual long CountWhere(Expression<Func<TEntity, bool>> predicateFn) Parameters predicateFn Expression<Func<TEntity, bool>> A condition that every TEntity can fullfill Returns long CountWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) Counts the number of records in the TEntity entity's table fullfilling the given predicateFn's condition. public virtual Task<long> CountWhereAsync(Expression<Func<TEntity, bool>> predicateFn, CancellationToken cancellationToken = default) Parameters predicateFn Expression<Func<TEntity, bool>> cancellationToken CancellationToken Returns Task<long> DeleteById(TKey) Deletes a given TEntity entity based on its id. public virtual EntityEntry<TEntity> DeleteById(TKey id) Parameters id TKey Returns EntityEntry<TEntity> 1 if the TEntity entity has been removed. Otherwise, it will throw a NullReferenceException Exceptions NullReferenceException Thrown if no entry matches the given id DeleteByIdAsync(TKey, CancellationToken) Deletes a given TEntity entity based on its id. public virtual Task<EntityEntry<TEntity>> DeleteByIdAsync(TKey id, CancellationToken cancellationToken = default) Parameters id TKey cancellationToken CancellationToken Returns Task<EntityEntry<TEntity>> 1 if the TEntity entity has been removed. Otherwise, it will throw a NullReferenceException Exceptions NullReferenceException Thrown if no entry matches the given id DeleteWhere(Expression<Func<TEntity, bool>>) Deletes one or more TEntity entities based on the predicateFn. public virtual int DeleteWhere(Expression<Func<TEntity, bool>> predicateFn) Parameters predicateFn Expression<Func<TEntity, bool>> Returns int The number of removed rows. Exceptions NullReferenceException DeleteWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) Deletes one or more TEntity entities based on the predicateFn. public virtual Task<int> DeleteWhereAsync(Expression<Func<TEntity, bool>> predicateFn, CancellationToken cancellationToken = default) Parameters predicateFn Expression<Func<TEntity, bool>> cancellationToken CancellationToken Returns Task<int> The number of removed rows. Exceptions NullReferenceException ExistsWhere(Expression<Func<TEntity, bool>>) Checks if at least one TEntity fullfills the condition of the predicateFn. public virtual bool ExistsWhere(Expression<Func<TEntity, bool>> predicateFn) Parameters predicateFn Expression<Func<TEntity, bool>> Returns bool ExistsWhereAsync(Expression<Func<TEntity, bool>>) Checks if at least one TEntity fullfills the condition of the predicateFn. public virtual Task<bool> ExistsWhereAsync(Expression<Func<TEntity, bool>> predicateFn) Parameters predicateFn Expression<Func<TEntity, bool>> Returns Task<bool> FindById(TKey) Finds the TEntity's having the given id. public virtual Option<TEntity> FindById(TKey id) Parameters id TKey Returns Option<TEntity> FindByIdAsync(TKey, CancellationToken) Finds the TEntity's having the given id. public virtual Task<Option<TEntity>> FindByIdAsync(TKey id, CancellationToken cancellationToken = default) Parameters id TKey cancellationToken CancellationToken Returns Task<Option<TEntity>> FindWhere(Expression<Func<TEntity, bool>>) Finds the firstTEntity entity that matches the given predicateFn. public virtual Option<TEntity> FindWhere(Expression<Func<TEntity, bool>> predicateFn) Parameters predicateFn Expression<Func<TEntity, bool>> Returns Option<TEntity> FindWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) Finds the firstTEntity entity that matches the given predicateFn. public virtual Task<Option<TEntity>> FindWhereAsync(Expression<Func<TEntity, bool>> predicateFn, CancellationToken cancellationToken = default) Parameters predicateFn Expression<Func<TEntity, bool>> cancellationToken CancellationToken Returns Task<Option<TEntity>> SaveChanges() Commits changes to the database. public virtual int SaveChanges() Returns int The number of modified entries. SaveChangesAsync() Commits changes to the database. public virtual Task<int> SaveChangesAsync() Returns Task<int> The number of modified entries. Update(TEntity) Updates data related to TEntity's entity. public virtual int Update(TEntity entity) Parameters entity TEntity Returns int UpdateMany(IEnumerable<TEntity>) Updates data related to a set of TEntity entities. public virtual int UpdateMany(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> Returns int UpdateWhere(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>) public virtual int UpdateWhere(Expression<Func<TEntity, bool>> predicate, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>> setPropertyCalls) Parameters predicate Expression<Func<TEntity, bool>> setPropertyCalls Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>> Returns int UpdateWhereAsync(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>, CancellationToken) public virtual Task<int> UpdateWhereAsync(Expression<Func<TEntity, bool>> predicate, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>> setPropertyCalls, CancellationToken token = default) Parameters predicate Expression<Func<TEntity, bool>> setPropertyCalls Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>> token CancellationToken Returns Task<int>"
  },
  "documentation/api/EfLight.Core.EfLightOptions.html": {
    "href": "documentation/api/EfLight.Core.EfLightOptions.html",
    "title": "Class EfLightOptions | EfLight",
    "keywords": "Class EfLightOptions Namespace EfLight.Core Assembly EfLight.dll Configuration object to provide when adding services implementing one of EfLight's interfaces. public class EfLightOptions Inheritance object EfLightOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Object.ToOption<T>(T?) Properties DefaultLifetime public ServiceLifetime DefaultLifetime { get; set; } Property Value ServiceLifetime"
  },
  "documentation/api/EfLight.Core.LightRepository-1.html": {
    "href": "documentation/api/EfLight.Core.LightRepository-1.html",
    "title": "Class LightRepository<TContext> | EfLight",
    "keywords": "Class LightRepository<TContext> Namespace EfLight.Core Assembly EfLight.dll public abstract class LightRepository<TContext> : ILightRepository where TContext : DbContext Type Parameters TContext Inheritance object LightRepository<TContext> Implements ILightRepository Derived CrudRepository<TContext, TEntity, TKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Object.ToOption<T>(T?) Constructors LightRepository(TContext) public LightRepository(TContext context) Parameters context TContext Fields _context protected readonly TContext _context Field Value TContext"
  },
  "documentation/api/EfLight.Core.PagingAndSortingRepository-3.html": {
    "href": "documentation/api/EfLight.Core.PagingAndSortingRepository-3.html",
    "title": "Class PagingAndSortingRepository<TContext, TEntity, TKey> | EfLight",
    "keywords": "Class PagingAndSortingRepository<TContext, TEntity, TKey> Namespace EfLight.Core Assembly EfLight.dll public abstract class PagingAndSortingRepository<TContext, TEntity, TKey> : CrudRepository<TContext, TEntity, TKey>, IPagingAndSortingRepository<TEntity, TKey>, ICrudRepository<TEntity, TKey>, ILightRepository where TContext : DbContext where TEntity : class Type Parameters TContext TEntity TKey Inheritance object LightRepository<TContext> CrudRepository<TContext, TEntity, TKey> PagingAndSortingRepository<TContext, TEntity, TKey> Implements IPagingAndSortingRepository<TEntity, TKey> ICrudRepository<TEntity, TKey> ILightRepository Inherited Members CrudRepository<TContext, TEntity, TKey>.SaveChanges() CrudRepository<TContext, TEntity, TKey>.SaveChangesAsync() CrudRepository<TContext, TEntity, TKey>.Count() CrudRepository<TContext, TEntity, TKey>.CountAsync(CancellationToken) CrudRepository<TContext, TEntity, TKey>.CountWhere(Expression<Func<TEntity, bool>>) CrudRepository<TContext, TEntity, TKey>.CountWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) CrudRepository<TContext, TEntity, TKey>.DeleteById(TKey) CrudRepository<TContext, TEntity, TKey>.DeleteByIdAsync(TKey, CancellationToken) CrudRepository<TContext, TEntity, TKey>.DeleteWhere(Expression<Func<TEntity, bool>>) CrudRepository<TContext, TEntity, TKey>.DeleteWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) CrudRepository<TContext, TEntity, TKey>.ExistsWhere(Expression<Func<TEntity, bool>>) CrudRepository<TContext, TEntity, TKey>.ExistsWhereAsync(Expression<Func<TEntity, bool>>) CrudRepository<TContext, TEntity, TKey>.AllAre(Expression<Func<TEntity, bool>>) CrudRepository<TContext, TEntity, TKey>.AllAreAsync(Expression<Func<TEntity, bool>>) CrudRepository<TContext, TEntity, TKey>.FindById(TKey) CrudRepository<TContext, TEntity, TKey>.FindByIdAsync(TKey, CancellationToken) CrudRepository<TContext, TEntity, TKey>.FindWhere(Expression<Func<TEntity, bool>>) CrudRepository<TContext, TEntity, TKey>.FindWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken) CrudRepository<TContext, TEntity, TKey>.Add(TEntity) CrudRepository<TContext, TEntity, TKey>.AddAsync(TEntity, CancellationToken) CrudRepository<TContext, TEntity, TKey>.AddMany(IEnumerable<TEntity>) CrudRepository<TContext, TEntity, TKey>.AddManyAsync(IEnumerable<TEntity>, CancellationToken) CrudRepository<TContext, TEntity, TKey>.Update(TEntity) CrudRepository<TContext, TEntity, TKey>.UpdateMany(IEnumerable<TEntity>) CrudRepository<TContext, TEntity, TKey>.UpdateWhere(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>) CrudRepository<TContext, TEntity, TKey>.UpdateWhereAsync(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>, CancellationToken) LightRepository<TContext>._context object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Object.ToOption<T>(T?) Constructors PagingAndSortingRepository(TContext) protected PagingAndSortingRepository(TContext context) Parameters context TContext Methods FindAll(PaginationRequest, bool) Returns a given set of at most PageSize of TEntity public IEnumerable<TEntity> FindAll(PaginationRequest page, bool track = false) Parameters page PaginationRequest track bool Returns IEnumerable<TEntity> FindAll(PaginationRequest, Expression<Func<TEntity, bool>>, bool) Returns a given set of at most PageSize of TEntity that matches the provided predicate. public IEnumerable<TEntity> FindAll(PaginationRequest page, Expression<Func<TEntity, bool>> predicate, bool track = false) Parameters page PaginationRequest predicate Expression<Func<TEntity, bool>> track bool Returns IEnumerable<TEntity> FindAll(bool) Retrives all records held in TEntity entity's table. public IEnumerable<TEntity> FindAll(bool track = false) Parameters track bool Returns IEnumerable<TEntity> FindAllAsync(PaginationRequest, bool, CancellationToken) Returns a given set of at most PageSize of TEntity. public Task<IEnumerable<TEntity>> FindAllAsync(PaginationRequest page, bool track = false, CancellationToken cancellationToken = default) Parameters page PaginationRequest track bool cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> FindAllAsync(PaginationRequest, Expression<Func<TEntity, bool>>, bool, CancellationToken) Returns a given set of at most PageSize of TEntity fullfilling the given predicate condition. public Task<IEnumerable<TEntity>> FindAllAsync(PaginationRequest page, Expression<Func<TEntity, bool>> predicate, bool track = false, CancellationToken cancellationToken = default) Parameters page PaginationRequest predicate Expression<Func<TEntity, bool>> track bool cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> FindAllAsync(bool, CancellationToken) Retrives all records held in TEntity entity's table. public Task<IEnumerable<TEntity>> FindAllAsync(bool track = false, CancellationToken cancellationToken = default) Parameters track bool cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken) Returns a given set of at most PageSize of TEntity that matches the provided predicate and ordered by TOrderKey public Task<IEnumerable<TEntity>> FindAllAsync<TOrderKey>(PaginationRequest page, Expression<Func<TEntity, bool>> predicate, Expression<Func<TEntity, TOrderKey>> orderKey, SortDirection sort = SortDirection.Ascending, bool track = false, CancellationToken cancellationToken = default) Parameters page PaginationRequest predicate Expression<Func<TEntity, bool>> orderKey Expression<Func<TEntity, TOrderKey>> sort SortDirection track bool cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> Type Parameters TOrderKey FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken) Returns a given set of at most page.PageSize.PageSize of TEntity ordered by TOrderKey. public Task<IEnumerable<TEntity>> FindAllAsync<TOrderKey>(PaginationRequest page, Expression<Func<TEntity, TOrderKey>> orderKey, SortDirection sort = SortDirection.Ascending, bool track = false, CancellationToken cancellationToken = default) Parameters page PaginationRequest orderKey Expression<Func<TEntity, TOrderKey>> sort SortDirection track bool cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> Type Parameters TOrderKey FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool) Returns a given set of at most PageSize of TEntity that matches the provided predicate and ordered by TOrderKey public IEnumerable<TEntity> FindAll<TOrderKey>(PaginationRequest page, Expression<Func<TEntity, bool>> predicate, Expression<Func<TEntity, TOrderKey>> orderKey, SortDirection sort = SortDirection.Ascending, bool track = false) Parameters page PaginationRequest predicate Expression<Func<TEntity, bool>> orderKey Expression<Func<TEntity, TOrderKey>> sort SortDirection track bool Returns IEnumerable<TEntity> Type Parameters TOrderKey FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool) Returns a given set of at most PageSize of TEntity ordered by TOrderKey. public IEnumerable<TEntity> FindAll<TOrderKey>(PaginationRequest page, Expression<Func<TEntity, TOrderKey>> orderKey, SortDirection sort = SortDirection.Ascending, bool track = false) Parameters page PaginationRequest orderKey Expression<Func<TEntity, TOrderKey>> sort SortDirection track bool Returns IEnumerable<TEntity> Type Parameters TOrderKey"
  },
  "documentation/api/EfLight.Core.html": {
    "href": "documentation/api/EfLight.Core.html",
    "title": "Namespace EfLight.Core | EfLight",
    "keywords": "Namespace EfLight.Core Classes CrudRepository<TContext, TEntity, TKey> EfLightOptions Configuration object to provide when adding services implementing one of EfLight's interfaces. LightRepository<TContext> PagingAndSortingRepository<TContext, TEntity, TKey>"
  },
  "documentation/api/EfLight.Extensions.Object.html": {
    "href": "documentation/api/EfLight.Extensions.Object.html",
    "title": "Class Object | EfLight",
    "keywords": "Class Object Namespace EfLight.Extensions Assembly EfLight.dll public static class Object Inheritance object Object Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToOption<T>(T?) public static Option<T> ToOption<T>(this T? value) where T : class Parameters value T Returns Option<T> Type Parameters T"
  },
  "documentation/api/EfLight.Extensions.ServicesCollection.html": {
    "href": "documentation/api/EfLight.Extensions.ServicesCollection.html",
    "title": "Class ServicesCollection | EfLight",
    "keywords": "Class ServicesCollection Namespace EfLight.Extensions Assembly EfLight.dll public static class ServicesCollection Inheritance object ServicesCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddEfLight<TAssembly>(IServiceCollection, Action<EfLightOptions>?) Registers all repositories in TAssembly using Scoped by default if they are not decorated with RepositoryLifetimeAttribute or options is null. Note that using Singleton will throw an Exception when WebApplicationBuilder will try to build the app. public static IServiceCollection AddEfLight<TAssembly>(this IServiceCollection services, Action<EfLightOptions>? options = null) Parameters services IServiceCollection options Action<EfLightOptions> Setup options to indicate the default lifetime of the repositories if they are not decorated with RepositoryLifetimeAttribute Returns IServiceCollection A reference to this instance after the operation has completed. Type Parameters TAssembly The assembly where the repositories are located. Exceptions ArgumentException If one of the repositories does not implement an interface extending from the generic repositories, this exception will be thrown."
  },
  "documentation/api/EfLight.Extensions.html": {
    "href": "documentation/api/EfLight.Extensions.html",
    "title": "Namespace EfLight.Extensions | EfLight",
    "keywords": "Namespace EfLight.Extensions Classes Object ServicesCollection"
  },
  "documentation/getting-started.html": {
    "href": "documentation/getting-started.html",
    "title": "Getting Started | EfLight",
    "keywords": "Getting Started Suppose that we have an entity class named Student and our DbContext is already configured. [Table(\"Student\")] class Student { [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public int Id { get; set; } public string? FirstName { get; set; } public string? LastName { get; set; } [DataType(DataType.Date)] public DateTime BirthDate { get; set; } } To interact with the table, just create a repository class which extends whether CrudRepository or PagingAndSortingRepository (the choice depends on your requirements) with its corresponding interface that will be injected in other classes. public interface IStudentRepository : ICrudRepository<Student, int> { } class StudentRepository : CrudRepository<YourDbContext, Student, int>, IStudentRepository { public StudentRepository(YourDbContext context) : base(context) { } } Then in Program.cs, you can register all of your repositories using: builder.Services.AddEfLight<Program>(); Usage All you have to do is to inject it where it is needed. For example: public class StudentService { private readonly IStudentRepository _repository; public StudentService(IStudentRepository repository) { _repository = repository; } public void CheckIfAllAboveAge(int age) { bool result = _repository.ExistsWhere(x => x.BirthData.Year > age); // Your business logic } public Student? FindByName(string name) { Student? student; Optional<Student> result = _repository.FindWhere(x => x.LastName == name); // Throws the exception if the result is null student = result.OrElseThrow(() => new Exception()); // Instead of throwing an exception, you can also do result.IfNullThen(() => { student = _repository.FindWhere(x => x.FirstName == name); }); return student; } } Custom queries You can also provide more features to your repository classes depending on your use cases. Just use an interface defining the contract and provide your own implementation of that use case. public interface IStudentRepository : ICrudRepository<Student, int> { void UpsertById(int studentId); } In the repository class, you'll have: class StudentRepository : CrudRepository<Student, int>, IStudentRepository { public StudentRepository(YourDbContext context) : base(context) { } public void UpsertById(int studentId) { // Your implementation } } Lifetime When you register your repositories, you can specify the lifetime of your repositories. By default, it is set to ServiceLifetime.Scoped, but you can provide your default lifetime using: builder.Services.AddEfLight<Program>(options => { options.DefaultLifetime = ServiceLifetime.Scoped; }); On top of that, you can specify the lifetime of each repository using RepositoryLifetime attribute on the repository class: [RepositoryLifetime(ServiceLifetime.Scoped)] public class StudentRepository : CrudRepository<YourDbContext, Student, int>, IStudentRepository { public StudentRepository(YourDbContext context) : base(context) { } }"
  },
  "documentation/introduction.html": {
    "href": "documentation/introduction.html",
    "title": "Introduction | EfLight",
    "keywords": "Introduction EfLight is thin wrapper on top of Entity Framework Core which provides you with out of the box utility functions that will allow to quickly scaffold your data layer."
  }
}