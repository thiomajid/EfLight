### YamlMime:XRefMap
sorted: true
references:
- uid: EfLight.Abstractions
  name: EfLight.Abstractions
  href: documentation/api/EfLight.Abstractions.html
  commentId: N:EfLight.Abstractions
  fullName: EfLight.Abstractions
  nameWithType: EfLight.Abstractions
- uid: EfLight.Abstractions.ICrudRepository`2
  name: ICrudRepository<TEntity, TKey>
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html
  commentId: T:EfLight.Abstractions.ICrudRepository`2
  name.vb: ICrudRepository(Of TEntity, TKey)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey)
  nameWithType: ICrudRepository<TEntity, TKey>
  nameWithType.vb: ICrudRepository(Of TEntity, TKey)
- uid: EfLight.Abstractions.ICrudRepository`2.Add(`0)
  name: Add(TEntity)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_Add__0_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.Add(`0)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Add(TEntity)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Add(TEntity)
  nameWithType: ICrudRepository<TEntity, TKey>.Add(TEntity)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Add(TEntity)
- uid: EfLight.Abstractions.ICrudRepository`2.Add*
  name: Add
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_Add_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.Add
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Add
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Add
  nameWithType: ICrudRepository<TEntity, TKey>.Add
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Add
- uid: EfLight.Abstractions.ICrudRepository`2.AddAsync(`0,System.Threading.CancellationToken)
  name: AddAsync(TEntity, CancellationToken)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AddAsync__0_System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.AddAsync(`0,System.Threading.CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddAsync(TEntity, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddAsync(TEntity, System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.AddAsync(TEntity, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddAsync(TEntity, CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.AddAsync*
  name: AddAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AddAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.AddAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddAsync
  nameWithType: ICrudRepository<TEntity, TKey>.AddAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddAsync
- uid: EfLight.Abstractions.ICrudRepository`2.AddMany(System.Collections.Generic.IEnumerable{`0})
  name: AddMany(IEnumerable<TEntity>)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AddMany_System_Collections_Generic_IEnumerable__0__
  commentId: M:EfLight.Abstractions.ICrudRepository`2.AddMany(System.Collections.Generic.IEnumerable{`0})
  name.vb: AddMany(IEnumerable(Of TEntity))
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddMany(System.Collections.Generic.IEnumerable<TEntity>)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddMany(System.Collections.Generic.IEnumerable(Of TEntity))
  nameWithType: ICrudRepository<TEntity, TKey>.AddMany(IEnumerable<TEntity>)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddMany(IEnumerable(Of TEntity))
- uid: EfLight.Abstractions.ICrudRepository`2.AddMany*
  name: AddMany
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AddMany_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.AddMany
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddMany
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddMany
  nameWithType: ICrudRepository<TEntity, TKey>.AddMany
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddMany
- uid: EfLight.Abstractions.ICrudRepository`2.AddManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  name: AddManyAsync(IEnumerable<TEntity>, CancellationToken)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AddManyAsync_System_Collections_Generic_IEnumerable__0__System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.AddManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)
  name.vb: AddManyAsync(IEnumerable(Of TEntity), CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddManyAsync(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddManyAsync(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.AddManyAsync(IEnumerable<TEntity>, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddManyAsync(IEnumerable(Of TEntity), CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.AddManyAsync*
  name: AddManyAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AddManyAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.AddManyAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AddManyAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AddManyAsync
  nameWithType: ICrudRepository<TEntity, TKey>.AddManyAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AddManyAsync
- uid: EfLight.Abstractions.ICrudRepository`2.AllAre(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: AllAre(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AllAre_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  commentId: M:EfLight.Abstractions.ICrudRepository`2.AllAre(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: AllAre(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AllAre(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AllAre(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: ICrudRepository<TEntity, TKey>.AllAre(Expression<Func<TEntity, bool>>)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AllAre(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.AllAre*
  name: AllAre
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AllAre_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.AllAre
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AllAre
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AllAre
  nameWithType: ICrudRepository<TEntity, TKey>.AllAre
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AllAre
- uid: EfLight.Abstractions.ICrudRepository`2.AllAreAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: AllAreAsync(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AllAreAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  commentId: M:EfLight.Abstractions.ICrudRepository`2.AllAreAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: AllAreAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AllAreAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AllAreAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: ICrudRepository<TEntity, TKey>.AllAreAsync(Expression<Func<TEntity, bool>>)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AllAreAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.AllAreAsync*
  name: AllAreAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_AllAreAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.AllAreAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.AllAreAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).AllAreAsync
  nameWithType: ICrudRepository<TEntity, TKey>.AllAreAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).AllAreAsync
- uid: EfLight.Abstractions.ICrudRepository`2.Count
  name: Count()
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_Count
  commentId: M:EfLight.Abstractions.ICrudRepository`2.Count
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Count()
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Count()
  nameWithType: ICrudRepository<TEntity, TKey>.Count()
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Count()
- uid: EfLight.Abstractions.ICrudRepository`2.Count*
  name: Count
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_Count_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.Count
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Count
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Count
  nameWithType: ICrudRepository<TEntity, TKey>.Count
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Count
- uid: EfLight.Abstractions.ICrudRepository`2.CountAsync(System.Threading.CancellationToken)
  name: CountAsync(CancellationToken)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_CountAsync_System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.CountAsync(System.Threading.CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountAsync(System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountAsync(System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.CountAsync(CancellationToken)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountAsync(CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.CountAsync*
  name: CountAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_CountAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.CountAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountAsync
  nameWithType: ICrudRepository<TEntity, TKey>.CountAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountAsync
- uid: EfLight.Abstractions.ICrudRepository`2.CountWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: CountWhere(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_CountWhere_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  commentId: M:EfLight.Abstractions.ICrudRepository`2.CountWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: CountWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: ICrudRepository<TEntity, TKey>.CountWhere(Expression<Func<TEntity, bool>>)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.CountWhere*
  name: CountWhere
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_CountWhere_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.CountWhere
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountWhere
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountWhere
  nameWithType: ICrudRepository<TEntity, TKey>.CountWhere
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountWhere
- uid: EfLight.Abstractions.ICrudRepository`2.CountWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: CountWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_CountWhereAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.CountWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: CountWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.CountWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.CountWhereAsync*
  name: CountWhereAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_CountWhereAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.CountWhereAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.CountWhereAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).CountWhereAsync
  nameWithType: ICrudRepository<TEntity, TKey>.CountWhereAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).CountWhereAsync
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteById(`1)
  name: DeleteById(TKey)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteById__1_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.DeleteById(`1)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteById(TKey)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteById(TKey)
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteById(TKey)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteById(TKey)
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteById*
  name: DeleteById
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteById_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.DeleteById
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteById
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteById
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteById
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteById
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteByIdAsync(`1,System.Threading.CancellationToken)
  name: DeleteByIdAsync(TKey, CancellationToken)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteByIdAsync__1_System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.DeleteByIdAsync(`1,System.Threading.CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteByIdAsync(TKey, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteByIdAsync(TKey, System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteByIdAsync(TKey, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteByIdAsync(TKey, CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteByIdAsync*
  name: DeleteByIdAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteByIdAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.DeleteByIdAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteByIdAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteByIdAsync
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteByIdAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteByIdAsync
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: DeleteWhere(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteWhere_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  commentId: M:EfLight.Abstractions.ICrudRepository`2.DeleteWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: DeleteWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteWhere(Expression<Func<TEntity, bool>>)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteWhere*
  name: DeleteWhere
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteWhere_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.DeleteWhere
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteWhere
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteWhere
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteWhere
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteWhere
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: DeleteWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteWhereAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.DeleteWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: DeleteWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.DeleteWhereAsync*
  name: DeleteWhereAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_DeleteWhereAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.DeleteWhereAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.DeleteWhereAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).DeleteWhereAsync
  nameWithType: ICrudRepository<TEntity, TKey>.DeleteWhereAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).DeleteWhereAsync
- uid: EfLight.Abstractions.ICrudRepository`2.ExistsWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: ExistsWhere(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_ExistsWhere_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  commentId: M:EfLight.Abstractions.ICrudRepository`2.ExistsWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: ExistsWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.ExistsWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).ExistsWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: ICrudRepository<TEntity, TKey>.ExistsWhere(Expression<Func<TEntity, bool>>)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).ExistsWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.ExistsWhere*
  name: ExistsWhere
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_ExistsWhere_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.ExistsWhere
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.ExistsWhere
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).ExistsWhere
  nameWithType: ICrudRepository<TEntity, TKey>.ExistsWhere
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).ExistsWhere
- uid: EfLight.Abstractions.ICrudRepository`2.ExistsWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: ExistsWhereAsync(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_ExistsWhereAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  commentId: M:EfLight.Abstractions.ICrudRepository`2.ExistsWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: ExistsWhereAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.ExistsWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).ExistsWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: ICrudRepository<TEntity, TKey>.ExistsWhereAsync(Expression<Func<TEntity, bool>>)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).ExistsWhereAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.ExistsWhereAsync*
  name: ExistsWhereAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_ExistsWhereAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.ExistsWhereAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.ExistsWhereAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).ExistsWhereAsync
  nameWithType: ICrudRepository<TEntity, TKey>.ExistsWhereAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).ExistsWhereAsync
- uid: EfLight.Abstractions.ICrudRepository`2.FindById(`1)
  name: FindById(TKey)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindById__1_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.FindById(`1)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindById(TKey)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindById(TKey)
  nameWithType: ICrudRepository<TEntity, TKey>.FindById(TKey)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindById(TKey)
- uid: EfLight.Abstractions.ICrudRepository`2.FindById*
  name: FindById
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindById_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.FindById
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindById
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindById
  nameWithType: ICrudRepository<TEntity, TKey>.FindById
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindById
- uid: EfLight.Abstractions.ICrudRepository`2.FindByIdAsync(`1,System.Threading.CancellationToken)
  name: FindByIdAsync(TKey, CancellationToken)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindByIdAsync__1_System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.FindByIdAsync(`1,System.Threading.CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindByIdAsync(TKey, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindByIdAsync(TKey, System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.FindByIdAsync(TKey, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindByIdAsync(TKey, CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.FindByIdAsync*
  name: FindByIdAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindByIdAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.FindByIdAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindByIdAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindByIdAsync
  nameWithType: ICrudRepository<TEntity, TKey>.FindByIdAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindByIdAsync
- uid: EfLight.Abstractions.ICrudRepository`2.FindWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: FindWhere(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindWhere_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  commentId: M:EfLight.Abstractions.ICrudRepository`2.FindWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: FindWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: ICrudRepository<TEntity, TKey>.FindWhere(Expression<Func<TEntity, bool>>)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Abstractions.ICrudRepository`2.FindWhere*
  name: FindWhere
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindWhere_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.FindWhere
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindWhere
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindWhere
  nameWithType: ICrudRepository<TEntity, TKey>.FindWhere
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindWhere
- uid: EfLight.Abstractions.ICrudRepository`2.FindWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name: FindWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindWhereAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.FindWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  name.vb: FindWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.FindWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.FindWhereAsync*
  name: FindWhereAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_FindWhereAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.FindWhereAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.FindWhereAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).FindWhereAsync
  nameWithType: ICrudRepository<TEntity, TKey>.FindWhereAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).FindWhereAsync
- uid: EfLight.Abstractions.ICrudRepository`2.SaveChanges
  name: SaveChanges()
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_SaveChanges
  commentId: M:EfLight.Abstractions.ICrudRepository`2.SaveChanges
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.SaveChanges()
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).SaveChanges()
  nameWithType: ICrudRepository<TEntity, TKey>.SaveChanges()
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).SaveChanges()
- uid: EfLight.Abstractions.ICrudRepository`2.SaveChanges*
  name: SaveChanges
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_SaveChanges_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.SaveChanges
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.SaveChanges
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).SaveChanges
  nameWithType: ICrudRepository<TEntity, TKey>.SaveChanges
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).SaveChanges
- uid: EfLight.Abstractions.ICrudRepository`2.SaveChangesAsync
  name: SaveChangesAsync()
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_SaveChangesAsync
  commentId: M:EfLight.Abstractions.ICrudRepository`2.SaveChangesAsync
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.SaveChangesAsync()
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).SaveChangesAsync()
  nameWithType: ICrudRepository<TEntity, TKey>.SaveChangesAsync()
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).SaveChangesAsync()
- uid: EfLight.Abstractions.ICrudRepository`2.SaveChangesAsync*
  name: SaveChangesAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_SaveChangesAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.SaveChangesAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.SaveChangesAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).SaveChangesAsync
  nameWithType: ICrudRepository<TEntity, TKey>.SaveChangesAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).SaveChangesAsync
- uid: EfLight.Abstractions.ICrudRepository`2.Update(`0)
  name: Update(TEntity)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_Update__0_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.Update(`0)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Update(TEntity)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Update(TEntity)
  nameWithType: ICrudRepository<TEntity, TKey>.Update(TEntity)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Update(TEntity)
- uid: EfLight.Abstractions.ICrudRepository`2.Update*
  name: Update
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_Update_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.Update
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.Update
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).Update
  nameWithType: ICrudRepository<TEntity, TKey>.Update
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).Update
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateMany(System.Collections.Generic.IEnumerable{`0})
  name: UpdateMany(IEnumerable<TEntity>)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_UpdateMany_System_Collections_Generic_IEnumerable__0__
  commentId: M:EfLight.Abstractions.ICrudRepository`2.UpdateMany(System.Collections.Generic.IEnumerable{`0})
  name.vb: UpdateMany(IEnumerable(Of TEntity))
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateMany(System.Collections.Generic.IEnumerable<TEntity>)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateMany(System.Collections.Generic.IEnumerable(Of TEntity))
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateMany(IEnumerable<TEntity>)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateMany(IEnumerable(Of TEntity))
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateMany*
  name: UpdateMany
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_UpdateMany_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.UpdateMany
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateMany
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateMany
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateMany
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateMany
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})
  name: UpdateWhere(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_UpdateWhere_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Linq_Expressions_Expression_System_Func_Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__0__Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__0____
  commentId: M:EfLight.Abstractions.ICrudRepository`2.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}})
  name.vb: UpdateWhere(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))))
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>, Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>>>)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity), Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity))))
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateWhere(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateWhere(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))))
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateWhere*
  name: UpdateWhere
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_UpdateWhere_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.UpdateWhere
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateWhere
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateWhere
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateWhere
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateWhere
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)
  name: UpdateWhereAsync(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>, CancellationToken)
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_UpdateWhereAsync_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Linq_Expressions_Expression_System_Func_Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__0__Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__0____System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.ICrudRepository`2.UpdateWhereAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)
  name.vb: UpdateWhereAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))), CancellationToken)
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>, Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>>>, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity), Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity))), System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateWhereAsync(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateWhereAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))), CancellationToken)
- uid: EfLight.Abstractions.ICrudRepository`2.UpdateWhereAsync*
  name: UpdateWhereAsync
  href: documentation/api/EfLight.Abstractions.ICrudRepository-2.html#EfLight_Abstractions_ICrudRepository_2_UpdateWhereAsync_
  commentId: Overload:EfLight.Abstractions.ICrudRepository`2.UpdateWhereAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.ICrudRepository<TEntity, TKey>.UpdateWhereAsync
  fullName.vb: EfLight.Abstractions.ICrudRepository(Of TEntity, TKey).UpdateWhereAsync
  nameWithType: ICrudRepository<TEntity, TKey>.UpdateWhereAsync
  nameWithType.vb: ICrudRepository(Of TEntity, TKey).UpdateWhereAsync
- uid: EfLight.Abstractions.ILightRepository
  name: ILightRepository
  href: documentation/api/EfLight.Abstractions.ILightRepository.html
  commentId: T:EfLight.Abstractions.ILightRepository
  fullName: EfLight.Abstractions.ILightRepository
  nameWithType: ILightRepository
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2
  name: IPagingAndSortingRepository<TEntity, TKey>
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html
  commentId: T:EfLight.Abstractions.IPagingAndSortingRepository`2
  name.vb: IPagingAndSortingRepository(Of TEntity, TKey)
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey)
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey)
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll(EfLight.Common.PaginationRequest,System.Boolean)
  name: FindAll(PaginationRequest, bool)
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAll_EfLight_Common_PaginationRequest_System_Boolean_
  commentId: M:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll(EfLight.Common.PaginationRequest,System.Boolean)
  name.vb: FindAll(PaginationRequest, Boolean)
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAll(EfLight.Common.PaginationRequest, bool)
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAll(EfLight.Common.PaginationRequest, Boolean)
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAll(PaginationRequest, bool)
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAll(PaginationRequest, Boolean)
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  name: FindAll(PaginationRequest, Expression<Func<TEntity, bool>>, bool)
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAll_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_
  commentId: M:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)
  name.vb: FindAll(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Boolean)
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAll(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, bool)
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAll(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), Boolean)
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAll(PaginationRequest, Expression<Func<TEntity, bool>>, bool)
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAll(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Boolean)
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll(System.Boolean)
  name: FindAll(bool)
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAll_System_Boolean_
  commentId: M:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll(System.Boolean)
  name.vb: FindAll(Boolean)
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAll(bool)
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAll(Boolean)
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAll(bool)
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAll(Boolean)
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll*
  name: FindAll
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAll_
  commentId: Overload:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll
  isSpec: "True"
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAll
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAll
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAll
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAll
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync(EfLight.Common.PaginationRequest,System.Boolean,System.Threading.CancellationToken)
  name: FindAllAsync(PaginationRequest, bool, CancellationToken)
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAllAsync_EfLight_Common_PaginationRequest_System_Boolean_System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync(EfLight.Common.PaginationRequest,System.Boolean,System.Threading.CancellationToken)
  name.vb: FindAllAsync(PaginationRequest, Boolean, CancellationToken)
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync(EfLight.Common.PaginationRequest, bool, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync(EfLight.Common.PaginationRequest, Boolean, System.Threading.CancellationToken)
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync(PaginationRequest, bool, CancellationToken)
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync(PaginationRequest, Boolean, CancellationToken)
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)
  name: FindAllAsync(PaginationRequest, Expression<Func<TEntity, bool>>, bool, CancellationToken)
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAllAsync_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Boolean_System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)
  name.vb: FindAllAsync(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Boolean, CancellationToken)
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, bool, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), Boolean, System.Threading.CancellationToken)
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync(PaginationRequest, Expression<Func<TEntity, bool>>, bool, CancellationToken)
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Boolean, CancellationToken)
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync(System.Boolean,System.Threading.CancellationToken)
  name: FindAllAsync(bool, CancellationToken)
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAllAsync_System_Boolean_System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync(System.Boolean,System.Threading.CancellationToken)
  name.vb: FindAllAsync(Boolean, CancellationToken)
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync(bool, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync(Boolean, System.Threading.CancellationToken)
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync(bool, CancellationToken)
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync(Boolean, CancellationToken)
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync*
  name: FindAllAsync
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAllAsync_
  commentId: Overload:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync
  isSpec: "True"
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},EfLight.Common.SortDirection,System.Boolean,System.Threading.CancellationToken)
  name: FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken)
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAllAsync__1_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Linq_Expressions_Expression_System_Func__0___0___EfLight_Common_SortDirection_System_Boolean_System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},EfLight.Common.SortDirection,System.Boolean,System.Threading.CancellationToken)
  name.vb: FindAllAsync(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean, CancellationToken)
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync<TOrderKey>(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TOrderKey>>, EfLight.Common.SortDirection, bool, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync(Of TOrderKey)(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TOrderKey)), EfLight.Common.SortDirection, Boolean, System.Threading.CancellationToken)
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken)
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean, CancellationToken)
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,``0}},EfLight.Common.SortDirection,System.Boolean,System.Threading.CancellationToken)
  name: FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken)
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAllAsync__1_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__0___0___EfLight_Common_SortDirection_System_Boolean_System_Threading_CancellationToken_
  commentId: M:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAllAsync``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,``0}},EfLight.Common.SortDirection,System.Boolean,System.Threading.CancellationToken)
  name.vb: FindAllAsync(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean, CancellationToken)
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync<TOrderKey>(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, TOrderKey>>, EfLight.Common.SortDirection, bool, System.Threading.CancellationToken)
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync(Of TOrderKey)(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TOrderKey)), EfLight.Common.SortDirection, Boolean, System.Threading.CancellationToken)
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken)
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAllAsync(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean, CancellationToken)
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},EfLight.Common.SortDirection,System.Boolean)
  name: FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool)
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAll__1_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Linq_Expressions_Expression_System_Func__0___0___EfLight_Common_SortDirection_System_Boolean_
  commentId: M:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},EfLight.Common.SortDirection,System.Boolean)
  name.vb: FindAll(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean)
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAll<TOrderKey>(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TOrderKey>>, EfLight.Common.SortDirection, bool)
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAll(Of TOrderKey)(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TOrderKey)), EfLight.Common.SortDirection, Boolean)
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool)
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAll(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean)
- uid: EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,``0}},EfLight.Common.SortDirection,System.Boolean)
  name: FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool)
  href: documentation/api/EfLight.Abstractions.IPagingAndSortingRepository-2.html#EfLight_Abstractions_IPagingAndSortingRepository_2_FindAll__1_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__0___0___EfLight_Common_SortDirection_System_Boolean_
  commentId: M:EfLight.Abstractions.IPagingAndSortingRepository`2.FindAll``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`0,``0}},EfLight.Common.SortDirection,System.Boolean)
  name.vb: FindAll(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean)
  fullName: EfLight.Abstractions.IPagingAndSortingRepository<TEntity, TKey>.FindAll<TOrderKey>(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, TOrderKey>>, EfLight.Common.SortDirection, bool)
  fullName.vb: EfLight.Abstractions.IPagingAndSortingRepository(Of TEntity, TKey).FindAll(Of TOrderKey)(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TOrderKey)), EfLight.Common.SortDirection, Boolean)
  nameWithType: IPagingAndSortingRepository<TEntity, TKey>.FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool)
  nameWithType.vb: IPagingAndSortingRepository(Of TEntity, TKey).FindAll(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean)
- uid: EfLight.Attributes
  name: EfLight.Attributes
  href: documentation/api/EfLight.Attributes.html
  commentId: N:EfLight.Attributes
  fullName: EfLight.Attributes
  nameWithType: EfLight.Attributes
- uid: EfLight.Attributes.RepositoryLifetimeAttribute
  name: RepositoryLifetimeAttribute
  href: documentation/api/EfLight.Attributes.RepositoryLifetimeAttribute.html
  commentId: T:EfLight.Attributes.RepositoryLifetimeAttribute
  fullName: EfLight.Attributes.RepositoryLifetimeAttribute
  nameWithType: RepositoryLifetimeAttribute
- uid: EfLight.Attributes.RepositoryLifetimeAttribute.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name: RepositoryLifetimeAttribute(ServiceLifetime)
  href: documentation/api/EfLight.Attributes.RepositoryLifetimeAttribute.html#EfLight_Attributes_RepositoryLifetimeAttribute__ctor_Microsoft_Extensions_DependencyInjection_ServiceLifetime_
  commentId: M:EfLight.Attributes.RepositoryLifetimeAttribute.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name.vb: New(ServiceLifetime)
  fullName: EfLight.Attributes.RepositoryLifetimeAttribute.RepositoryLifetimeAttribute(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  fullName.vb: EfLight.Attributes.RepositoryLifetimeAttribute.New(Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  nameWithType: RepositoryLifetimeAttribute.RepositoryLifetimeAttribute(ServiceLifetime)
  nameWithType.vb: RepositoryLifetimeAttribute.New(ServiceLifetime)
- uid: EfLight.Attributes.RepositoryLifetimeAttribute.#ctor*
  name: RepositoryLifetimeAttribute
  href: documentation/api/EfLight.Attributes.RepositoryLifetimeAttribute.html#EfLight_Attributes_RepositoryLifetimeAttribute__ctor_
  commentId: Overload:EfLight.Attributes.RepositoryLifetimeAttribute.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EfLight.Attributes.RepositoryLifetimeAttribute.RepositoryLifetimeAttribute
  fullName.vb: EfLight.Attributes.RepositoryLifetimeAttribute.New
  nameWithType: RepositoryLifetimeAttribute.RepositoryLifetimeAttribute
  nameWithType.vb: RepositoryLifetimeAttribute.New
- uid: EfLight.Attributes.RepositoryLifetimeAttribute.Lifetime
  name: Lifetime
  href: documentation/api/EfLight.Attributes.RepositoryLifetimeAttribute.html#EfLight_Attributes_RepositoryLifetimeAttribute_Lifetime
  commentId: P:EfLight.Attributes.RepositoryLifetimeAttribute.Lifetime
  fullName: EfLight.Attributes.RepositoryLifetimeAttribute.Lifetime
  nameWithType: RepositoryLifetimeAttribute.Lifetime
- uid: EfLight.Attributes.RepositoryLifetimeAttribute.Lifetime*
  name: Lifetime
  href: documentation/api/EfLight.Attributes.RepositoryLifetimeAttribute.html#EfLight_Attributes_RepositoryLifetimeAttribute_Lifetime_
  commentId: Overload:EfLight.Attributes.RepositoryLifetimeAttribute.Lifetime
  isSpec: "True"
  fullName: EfLight.Attributes.RepositoryLifetimeAttribute.Lifetime
  nameWithType: RepositoryLifetimeAttribute.Lifetime
- uid: EfLight.Common
  name: EfLight.Common
  href: documentation/api/EfLight.Common.html
  commentId: N:EfLight.Common
  fullName: EfLight.Common
  nameWithType: EfLight.Common
- uid: EfLight.Common.PaginationRequest
  name: PaginationRequest
  href: documentation/api/EfLight.Common.PaginationRequest.html
  commentId: T:EfLight.Common.PaginationRequest
  fullName: EfLight.Common.PaginationRequest
  nameWithType: PaginationRequest
- uid: EfLight.Common.PaginationRequest.#ctor(System.Int32,System.Int32)
  name: PaginationRequest(int, int)
  href: documentation/api/EfLight.Common.PaginationRequest.html#EfLight_Common_PaginationRequest__ctor_System_Int32_System_Int32_
  commentId: M:EfLight.Common.PaginationRequest.#ctor(System.Int32,System.Int32)
  name.vb: New(Integer, Integer)
  fullName: EfLight.Common.PaginationRequest.PaginationRequest(int, int)
  fullName.vb: EfLight.Common.PaginationRequest.New(Integer, Integer)
  nameWithType: PaginationRequest.PaginationRequest(int, int)
  nameWithType.vb: PaginationRequest.New(Integer, Integer)
- uid: EfLight.Common.PaginationRequest.#ctor*
  name: PaginationRequest
  href: documentation/api/EfLight.Common.PaginationRequest.html#EfLight_Common_PaginationRequest__ctor_
  commentId: Overload:EfLight.Common.PaginationRequest.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EfLight.Common.PaginationRequest.PaginationRequest
  fullName.vb: EfLight.Common.PaginationRequest.New
  nameWithType: PaginationRequest.PaginationRequest
  nameWithType.vb: PaginationRequest.New
- uid: EfLight.Common.PaginationRequest.Index
  name: Index
  href: documentation/api/EfLight.Common.PaginationRequest.html#EfLight_Common_PaginationRequest_Index
  commentId: P:EfLight.Common.PaginationRequest.Index
  fullName: EfLight.Common.PaginationRequest.Index
  nameWithType: PaginationRequest.Index
- uid: EfLight.Common.PaginationRequest.Index*
  name: Index
  href: documentation/api/EfLight.Common.PaginationRequest.html#EfLight_Common_PaginationRequest_Index_
  commentId: Overload:EfLight.Common.PaginationRequest.Index
  isSpec: "True"
  fullName: EfLight.Common.PaginationRequest.Index
  nameWithType: PaginationRequest.Index
- uid: EfLight.Common.PaginationRequest.Offset
  name: Offset
  href: documentation/api/EfLight.Common.PaginationRequest.html#EfLight_Common_PaginationRequest_Offset
  commentId: P:EfLight.Common.PaginationRequest.Offset
  fullName: EfLight.Common.PaginationRequest.Offset
  nameWithType: PaginationRequest.Offset
- uid: EfLight.Common.PaginationRequest.Offset*
  name: Offset
  href: documentation/api/EfLight.Common.PaginationRequest.html#EfLight_Common_PaginationRequest_Offset_
  commentId: Overload:EfLight.Common.PaginationRequest.Offset
  isSpec: "True"
  fullName: EfLight.Common.PaginationRequest.Offset
  nameWithType: PaginationRequest.Offset
- uid: EfLight.Common.PaginationRequest.Skip
  name: Skip
  href: documentation/api/EfLight.Common.PaginationRequest.html#EfLight_Common_PaginationRequest_Skip
  commentId: P:EfLight.Common.PaginationRequest.Skip
  fullName: EfLight.Common.PaginationRequest.Skip
  nameWithType: PaginationRequest.Skip
- uid: EfLight.Common.PaginationRequest.Skip*
  name: Skip
  href: documentation/api/EfLight.Common.PaginationRequest.html#EfLight_Common_PaginationRequest_Skip_
  commentId: Overload:EfLight.Common.PaginationRequest.Skip
  isSpec: "True"
  fullName: EfLight.Common.PaginationRequest.Skip
  nameWithType: PaginationRequest.Skip
- uid: EfLight.Common.SortDirection
  name: SortDirection
  href: documentation/api/EfLight.Common.SortDirection.html
  commentId: T:EfLight.Common.SortDirection
  fullName: EfLight.Common.SortDirection
  nameWithType: SortDirection
- uid: EfLight.Common.SortDirection.Ascending
  name: Ascending
  href: documentation/api/EfLight.Common.SortDirection.html#EfLight_Common_SortDirection_Ascending
  commentId: F:EfLight.Common.SortDirection.Ascending
  fullName: EfLight.Common.SortDirection.Ascending
  nameWithType: SortDirection.Ascending
- uid: EfLight.Common.SortDirection.Descending
  name: Descending
  href: documentation/api/EfLight.Common.SortDirection.html#EfLight_Common_SortDirection_Descending
  commentId: F:EfLight.Common.SortDirection.Descending
  fullName: EfLight.Common.SortDirection.Descending
  nameWithType: SortDirection.Descending
- uid: EfLight.Core
  name: EfLight.Core
  href: documentation/api/EfLight.Core.html
  commentId: N:EfLight.Core
  fullName: EfLight.Core
  nameWithType: EfLight.Core
- uid: EfLight.Core.CrudRepository`3
  name: CrudRepository<TContext, TEntity, TKey>
  href: documentation/api/EfLight.Core.CrudRepository-3.html
  commentId: T:EfLight.Core.CrudRepository`3
  name.vb: CrudRepository(Of TContext, TEntity, TKey)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey)
  nameWithType: CrudRepository<TContext, TEntity, TKey>
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey)
- uid: EfLight.Core.CrudRepository`3.#ctor(`0)
  name: CrudRepository(TContext)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3__ctor__0_
  commentId: M:EfLight.Core.CrudRepository`3.#ctor(`0)
  name.vb: New(TContext)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.CrudRepository(TContext)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).New(TContext)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.CrudRepository(TContext)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).New(TContext)
- uid: EfLight.Core.CrudRepository`3.#ctor*
  name: CrudRepository
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3__ctor_
  commentId: Overload:EfLight.Core.CrudRepository`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.CrudRepository
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).New
  nameWithType: CrudRepository<TContext, TEntity, TKey>.CrudRepository
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).New
- uid: EfLight.Core.CrudRepository`3.Add(`1)
  name: Add(TEntity)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_Add__1_
  commentId: M:EfLight.Core.CrudRepository`3.Add(`1)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.Add(TEntity)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).Add(TEntity)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.Add(TEntity)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).Add(TEntity)
- uid: EfLight.Core.CrudRepository`3.Add*
  name: Add
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_Add_
  commentId: Overload:EfLight.Core.CrudRepository`3.Add
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.Add
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).Add
  nameWithType: CrudRepository<TContext, TEntity, TKey>.Add
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).Add
- uid: EfLight.Core.CrudRepository`3.AddAsync(`1,System.Threading.CancellationToken)
  name: AddAsync(TEntity, CancellationToken)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_AddAsync__1_System_Threading_CancellationToken_
  commentId: M:EfLight.Core.CrudRepository`3.AddAsync(`1,System.Threading.CancellationToken)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.AddAsync(TEntity, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).AddAsync(TEntity, System.Threading.CancellationToken)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.AddAsync(TEntity, CancellationToken)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).AddAsync(TEntity, CancellationToken)
- uid: EfLight.Core.CrudRepository`3.AddAsync*
  name: AddAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_AddAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.AddAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.AddAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).AddAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.AddAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).AddAsync
- uid: EfLight.Core.CrudRepository`3.AddMany(System.Collections.Generic.IEnumerable{`1})
  name: AddMany(IEnumerable<TEntity>)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_AddMany_System_Collections_Generic_IEnumerable__1__
  commentId: M:EfLight.Core.CrudRepository`3.AddMany(System.Collections.Generic.IEnumerable{`1})
  name.vb: AddMany(IEnumerable(Of TEntity))
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.AddMany(System.Collections.Generic.IEnumerable<TEntity>)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).AddMany(System.Collections.Generic.IEnumerable(Of TEntity))
  nameWithType: CrudRepository<TContext, TEntity, TKey>.AddMany(IEnumerable<TEntity>)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).AddMany(IEnumerable(Of TEntity))
- uid: EfLight.Core.CrudRepository`3.AddMany*
  name: AddMany
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_AddMany_
  commentId: Overload:EfLight.Core.CrudRepository`3.AddMany
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.AddMany
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).AddMany
  nameWithType: CrudRepository<TContext, TEntity, TKey>.AddMany
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).AddMany
- uid: EfLight.Core.CrudRepository`3.AddManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)
  name: AddManyAsync(IEnumerable<TEntity>, CancellationToken)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_AddManyAsync_System_Collections_Generic_IEnumerable__1__System_Threading_CancellationToken_
  commentId: M:EfLight.Core.CrudRepository`3.AddManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)
  name.vb: AddManyAsync(IEnumerable(Of TEntity), CancellationToken)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.AddManyAsync(System.Collections.Generic.IEnumerable<TEntity>, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).AddManyAsync(System.Collections.Generic.IEnumerable(Of TEntity), System.Threading.CancellationToken)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.AddManyAsync(IEnumerable<TEntity>, CancellationToken)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).AddManyAsync(IEnumerable(Of TEntity), CancellationToken)
- uid: EfLight.Core.CrudRepository`3.AddManyAsync*
  name: AddManyAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_AddManyAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.AddManyAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.AddManyAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).AddManyAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.AddManyAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).AddManyAsync
- uid: EfLight.Core.CrudRepository`3.AllAre(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: AllAre(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_AllAre_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___
  commentId: M:EfLight.Core.CrudRepository`3.AllAre(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name.vb: AllAre(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.AllAre(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).AllAre(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: CrudRepository<TContext, TEntity, TKey>.AllAre(Expression<Func<TEntity, bool>>)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).AllAre(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Core.CrudRepository`3.AllAre*
  name: AllAre
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_AllAre_
  commentId: Overload:EfLight.Core.CrudRepository`3.AllAre
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.AllAre
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).AllAre
  nameWithType: CrudRepository<TContext, TEntity, TKey>.AllAre
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).AllAre
- uid: EfLight.Core.CrudRepository`3.AllAreAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: AllAreAsync(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_AllAreAsync_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___
  commentId: M:EfLight.Core.CrudRepository`3.AllAreAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name.vb: AllAreAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.AllAreAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).AllAreAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: CrudRepository<TContext, TEntity, TKey>.AllAreAsync(Expression<Func<TEntity, bool>>)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).AllAreAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Core.CrudRepository`3.AllAreAsync*
  name: AllAreAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_AllAreAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.AllAreAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.AllAreAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).AllAreAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.AllAreAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).AllAreAsync
- uid: EfLight.Core.CrudRepository`3.Count
  name: Count()
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_Count
  commentId: M:EfLight.Core.CrudRepository`3.Count
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.Count()
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).Count()
  nameWithType: CrudRepository<TContext, TEntity, TKey>.Count()
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).Count()
- uid: EfLight.Core.CrudRepository`3.Count*
  name: Count
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_Count_
  commentId: Overload:EfLight.Core.CrudRepository`3.Count
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.Count
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).Count
  nameWithType: CrudRepository<TContext, TEntity, TKey>.Count
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).Count
- uid: EfLight.Core.CrudRepository`3.CountAsync(System.Threading.CancellationToken)
  name: CountAsync(CancellationToken)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_CountAsync_System_Threading_CancellationToken_
  commentId: M:EfLight.Core.CrudRepository`3.CountAsync(System.Threading.CancellationToken)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.CountAsync(System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).CountAsync(System.Threading.CancellationToken)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.CountAsync(CancellationToken)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).CountAsync(CancellationToken)
- uid: EfLight.Core.CrudRepository`3.CountAsync*
  name: CountAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_CountAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.CountAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.CountAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).CountAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.CountAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).CountAsync
- uid: EfLight.Core.CrudRepository`3.CountWhere(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: CountWhere(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_CountWhere_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___
  commentId: M:EfLight.Core.CrudRepository`3.CountWhere(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name.vb: CountWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.CountWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).CountWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: CrudRepository<TContext, TEntity, TKey>.CountWhere(Expression<Func<TEntity, bool>>)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).CountWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Core.CrudRepository`3.CountWhere*
  name: CountWhere
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_CountWhere_
  commentId: Overload:EfLight.Core.CrudRepository`3.CountWhere
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.CountWhere
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).CountWhere
  nameWithType: CrudRepository<TContext, TEntity, TKey>.CountWhere
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).CountWhere
- uid: EfLight.Core.CrudRepository`3.CountWhereAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)
  name: CountWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_CountWhereAsync_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___System_Threading_CancellationToken_
  commentId: M:EfLight.Core.CrudRepository`3.CountWhereAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)
  name.vb: CountWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.CountWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).CountWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.CountWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).CountWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: EfLight.Core.CrudRepository`3.CountWhereAsync*
  name: CountWhereAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_CountWhereAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.CountWhereAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.CountWhereAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).CountWhereAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.CountWhereAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).CountWhereAsync
- uid: EfLight.Core.CrudRepository`3.DeleteById(`2)
  name: DeleteById(TKey)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_DeleteById__2_
  commentId: M:EfLight.Core.CrudRepository`3.DeleteById(`2)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.DeleteById(TKey)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).DeleteById(TKey)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.DeleteById(TKey)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).DeleteById(TKey)
- uid: EfLight.Core.CrudRepository`3.DeleteById*
  name: DeleteById
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_DeleteById_
  commentId: Overload:EfLight.Core.CrudRepository`3.DeleteById
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.DeleteById
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).DeleteById
  nameWithType: CrudRepository<TContext, TEntity, TKey>.DeleteById
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).DeleteById
- uid: EfLight.Core.CrudRepository`3.DeleteByIdAsync(`2,System.Threading.CancellationToken)
  name: DeleteByIdAsync(TKey, CancellationToken)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_DeleteByIdAsync__2_System_Threading_CancellationToken_
  commentId: M:EfLight.Core.CrudRepository`3.DeleteByIdAsync(`2,System.Threading.CancellationToken)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.DeleteByIdAsync(TKey, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).DeleteByIdAsync(TKey, System.Threading.CancellationToken)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.DeleteByIdAsync(TKey, CancellationToken)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).DeleteByIdAsync(TKey, CancellationToken)
- uid: EfLight.Core.CrudRepository`3.DeleteByIdAsync*
  name: DeleteByIdAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_DeleteByIdAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.DeleteByIdAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.DeleteByIdAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).DeleteByIdAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.DeleteByIdAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).DeleteByIdAsync
- uid: EfLight.Core.CrudRepository`3.DeleteWhere(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: DeleteWhere(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_DeleteWhere_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___
  commentId: M:EfLight.Core.CrudRepository`3.DeleteWhere(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name.vb: DeleteWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.DeleteWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).DeleteWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: CrudRepository<TContext, TEntity, TKey>.DeleteWhere(Expression<Func<TEntity, bool>>)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).DeleteWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Core.CrudRepository`3.DeleteWhere*
  name: DeleteWhere
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_DeleteWhere_
  commentId: Overload:EfLight.Core.CrudRepository`3.DeleteWhere
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.DeleteWhere
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).DeleteWhere
  nameWithType: CrudRepository<TContext, TEntity, TKey>.DeleteWhere
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).DeleteWhere
- uid: EfLight.Core.CrudRepository`3.DeleteWhereAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)
  name: DeleteWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_DeleteWhereAsync_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___System_Threading_CancellationToken_
  commentId: M:EfLight.Core.CrudRepository`3.DeleteWhereAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)
  name.vb: DeleteWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.DeleteWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).DeleteWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.DeleteWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).DeleteWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: EfLight.Core.CrudRepository`3.DeleteWhereAsync*
  name: DeleteWhereAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_DeleteWhereAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.DeleteWhereAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.DeleteWhereAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).DeleteWhereAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.DeleteWhereAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).DeleteWhereAsync
- uid: EfLight.Core.CrudRepository`3.ExistsWhere(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: ExistsWhere(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_ExistsWhere_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___
  commentId: M:EfLight.Core.CrudRepository`3.ExistsWhere(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name.vb: ExistsWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.ExistsWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).ExistsWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: CrudRepository<TContext, TEntity, TKey>.ExistsWhere(Expression<Func<TEntity, bool>>)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).ExistsWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Core.CrudRepository`3.ExistsWhere*
  name: ExistsWhere
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_ExistsWhere_
  commentId: Overload:EfLight.Core.CrudRepository`3.ExistsWhere
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.ExistsWhere
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).ExistsWhere
  nameWithType: CrudRepository<TContext, TEntity, TKey>.ExistsWhere
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).ExistsWhere
- uid: EfLight.Core.CrudRepository`3.ExistsWhereAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: ExistsWhereAsync(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_ExistsWhereAsync_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___
  commentId: M:EfLight.Core.CrudRepository`3.ExistsWhereAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name.vb: ExistsWhereAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.ExistsWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).ExistsWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: CrudRepository<TContext, TEntity, TKey>.ExistsWhereAsync(Expression<Func<TEntity, bool>>)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).ExistsWhereAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Core.CrudRepository`3.ExistsWhereAsync*
  name: ExistsWhereAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_ExistsWhereAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.ExistsWhereAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.ExistsWhereAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).ExistsWhereAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.ExistsWhereAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).ExistsWhereAsync
- uid: EfLight.Core.CrudRepository`3.FindById(`2)
  name: FindById(TKey)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_FindById__2_
  commentId: M:EfLight.Core.CrudRepository`3.FindById(`2)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.FindById(TKey)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).FindById(TKey)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.FindById(TKey)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).FindById(TKey)
- uid: EfLight.Core.CrudRepository`3.FindById*
  name: FindById
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_FindById_
  commentId: Overload:EfLight.Core.CrudRepository`3.FindById
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.FindById
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).FindById
  nameWithType: CrudRepository<TContext, TEntity, TKey>.FindById
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).FindById
- uid: EfLight.Core.CrudRepository`3.FindByIdAsync(`2,System.Threading.CancellationToken)
  name: FindByIdAsync(TKey, CancellationToken)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_FindByIdAsync__2_System_Threading_CancellationToken_
  commentId: M:EfLight.Core.CrudRepository`3.FindByIdAsync(`2,System.Threading.CancellationToken)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.FindByIdAsync(TKey, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).FindByIdAsync(TKey, System.Threading.CancellationToken)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.FindByIdAsync(TKey, CancellationToken)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).FindByIdAsync(TKey, CancellationToken)
- uid: EfLight.Core.CrudRepository`3.FindByIdAsync*
  name: FindByIdAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_FindByIdAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.FindByIdAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.FindByIdAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).FindByIdAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.FindByIdAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).FindByIdAsync
- uid: EfLight.Core.CrudRepository`3.FindWhere(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: FindWhere(Expression<Func<TEntity, bool>>)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_FindWhere_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___
  commentId: M:EfLight.Core.CrudRepository`3.FindWhere(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name.vb: FindWhere(Expression(Of Func(Of TEntity, Boolean)))
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.FindWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).FindWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)))
  nameWithType: CrudRepository<TContext, TEntity, TKey>.FindWhere(Expression<Func<TEntity, bool>>)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).FindWhere(Expression(Of Func(Of TEntity, Boolean)))
- uid: EfLight.Core.CrudRepository`3.FindWhere*
  name: FindWhere
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_FindWhere_
  commentId: Overload:EfLight.Core.CrudRepository`3.FindWhere
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.FindWhere
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).FindWhere
  nameWithType: CrudRepository<TContext, TEntity, TKey>.FindWhere
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).FindWhere
- uid: EfLight.Core.CrudRepository`3.FindWhereAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)
  name: FindWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_FindWhereAsync_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___System_Threading_CancellationToken_
  commentId: M:EfLight.Core.CrudRepository`3.FindWhereAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)
  name.vb: FindWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.FindWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).FindWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Threading.CancellationToken)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.FindWhereAsync(Expression<Func<TEntity, bool>>, CancellationToken)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).FindWhereAsync(Expression(Of Func(Of TEntity, Boolean)), CancellationToken)
- uid: EfLight.Core.CrudRepository`3.FindWhereAsync*
  name: FindWhereAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_FindWhereAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.FindWhereAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.FindWhereAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).FindWhereAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.FindWhereAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).FindWhereAsync
- uid: EfLight.Core.CrudRepository`3.SaveChanges
  name: SaveChanges()
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_SaveChanges
  commentId: M:EfLight.Core.CrudRepository`3.SaveChanges
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.SaveChanges()
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).SaveChanges()
  nameWithType: CrudRepository<TContext, TEntity, TKey>.SaveChanges()
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).SaveChanges()
- uid: EfLight.Core.CrudRepository`3.SaveChanges*
  name: SaveChanges
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_SaveChanges_
  commentId: Overload:EfLight.Core.CrudRepository`3.SaveChanges
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.SaveChanges
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).SaveChanges
  nameWithType: CrudRepository<TContext, TEntity, TKey>.SaveChanges
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).SaveChanges
- uid: EfLight.Core.CrudRepository`3.SaveChangesAsync
  name: SaveChangesAsync()
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_SaveChangesAsync
  commentId: M:EfLight.Core.CrudRepository`3.SaveChangesAsync
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.SaveChangesAsync()
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).SaveChangesAsync()
  nameWithType: CrudRepository<TContext, TEntity, TKey>.SaveChangesAsync()
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).SaveChangesAsync()
- uid: EfLight.Core.CrudRepository`3.SaveChangesAsync*
  name: SaveChangesAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_SaveChangesAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.SaveChangesAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.SaveChangesAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).SaveChangesAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.SaveChangesAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).SaveChangesAsync
- uid: EfLight.Core.CrudRepository`3.Update(`1)
  name: Update(TEntity)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_Update__1_
  commentId: M:EfLight.Core.CrudRepository`3.Update(`1)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.Update(TEntity)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).Update(TEntity)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.Update(TEntity)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).Update(TEntity)
- uid: EfLight.Core.CrudRepository`3.Update*
  name: Update
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_Update_
  commentId: Overload:EfLight.Core.CrudRepository`3.Update
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.Update
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).Update
  nameWithType: CrudRepository<TContext, TEntity, TKey>.Update
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).Update
- uid: EfLight.Core.CrudRepository`3.UpdateMany(System.Collections.Generic.IEnumerable{`1})
  name: UpdateMany(IEnumerable<TEntity>)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_UpdateMany_System_Collections_Generic_IEnumerable__1__
  commentId: M:EfLight.Core.CrudRepository`3.UpdateMany(System.Collections.Generic.IEnumerable{`1})
  name.vb: UpdateMany(IEnumerable(Of TEntity))
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.UpdateMany(System.Collections.Generic.IEnumerable<TEntity>)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).UpdateMany(System.Collections.Generic.IEnumerable(Of TEntity))
  nameWithType: CrudRepository<TContext, TEntity, TKey>.UpdateMany(IEnumerable<TEntity>)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).UpdateMany(IEnumerable(Of TEntity))
- uid: EfLight.Core.CrudRepository`3.UpdateMany*
  name: UpdateMany
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_UpdateMany_
  commentId: Overload:EfLight.Core.CrudRepository`3.UpdateMany
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.UpdateMany
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).UpdateMany
  nameWithType: CrudRepository<TContext, TEntity, TKey>.UpdateMany
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).UpdateMany
- uid: EfLight.Core.CrudRepository`3.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`1},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`1}}})
  name: UpdateWhere(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_UpdateWhere_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___System_Linq_Expressions_Expression_System_Func_Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__1__Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__1____
  commentId: M:EfLight.Core.CrudRepository`3.UpdateWhere(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`1},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`1}}})
  name.vb: UpdateWhere(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))))
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.UpdateWhere(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>, Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>>>)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).UpdateWhere(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity), Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity))))
  nameWithType: CrudRepository<TContext, TEntity, TKey>.UpdateWhere(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).UpdateWhere(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))))
- uid: EfLight.Core.CrudRepository`3.UpdateWhere*
  name: UpdateWhere
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_UpdateWhere_
  commentId: Overload:EfLight.Core.CrudRepository`3.UpdateWhere
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.UpdateWhere
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).UpdateWhere
  nameWithType: CrudRepository<TContext, TEntity, TKey>.UpdateWhere
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).UpdateWhere
- uid: EfLight.Core.CrudRepository`3.UpdateWhereAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`1},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`1}}},System.Threading.CancellationToken)
  name: UpdateWhereAsync(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>, CancellationToken)
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_UpdateWhereAsync_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___System_Linq_Expressions_Expression_System_Func_Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__1__Microsoft_EntityFrameworkCore_Query_SetPropertyCalls__1____System_Threading_CancellationToken_
  commentId: M:EfLight.Core.CrudRepository`3.UpdateWhereAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`1},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`1}}},System.Threading.CancellationToken)
  name.vb: UpdateWhereAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))), CancellationToken)
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.UpdateWhereAsync(System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>, Microsoft.EntityFrameworkCore.Query.SetPropertyCalls<TEntity>>>, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).UpdateWhereAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity), Microsoft.EntityFrameworkCore.Query.SetPropertyCalls(Of TEntity))), System.Threading.CancellationToken)
  nameWithType: CrudRepository<TContext, TEntity, TKey>.UpdateWhereAsync(Expression<Func<TEntity, bool>>, Expression<Func<SetPropertyCalls<TEntity>, SetPropertyCalls<TEntity>>>, CancellationToken)
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).UpdateWhereAsync(Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of SetPropertyCalls(Of TEntity), SetPropertyCalls(Of TEntity))), CancellationToken)
- uid: EfLight.Core.CrudRepository`3.UpdateWhereAsync*
  name: UpdateWhereAsync
  href: documentation/api/EfLight.Core.CrudRepository-3.html#EfLight_Core_CrudRepository_3_UpdateWhereAsync_
  commentId: Overload:EfLight.Core.CrudRepository`3.UpdateWhereAsync
  isSpec: "True"
  fullName: EfLight.Core.CrudRepository<TContext, TEntity, TKey>.UpdateWhereAsync
  fullName.vb: EfLight.Core.CrudRepository(Of TContext, TEntity, TKey).UpdateWhereAsync
  nameWithType: CrudRepository<TContext, TEntity, TKey>.UpdateWhereAsync
  nameWithType.vb: CrudRepository(Of TContext, TEntity, TKey).UpdateWhereAsync
- uid: EfLight.Core.EfLightOptions
  name: EfLightOptions
  href: documentation/api/EfLight.Core.EfLightOptions.html
  commentId: T:EfLight.Core.EfLightOptions
  fullName: EfLight.Core.EfLightOptions
  nameWithType: EfLightOptions
- uid: EfLight.Core.EfLightOptions.DefaultLifetime
  name: DefaultLifetime
  href: documentation/api/EfLight.Core.EfLightOptions.html#EfLight_Core_EfLightOptions_DefaultLifetime
  commentId: P:EfLight.Core.EfLightOptions.DefaultLifetime
  fullName: EfLight.Core.EfLightOptions.DefaultLifetime
  nameWithType: EfLightOptions.DefaultLifetime
- uid: EfLight.Core.EfLightOptions.DefaultLifetime*
  name: DefaultLifetime
  href: documentation/api/EfLight.Core.EfLightOptions.html#EfLight_Core_EfLightOptions_DefaultLifetime_
  commentId: Overload:EfLight.Core.EfLightOptions.DefaultLifetime
  isSpec: "True"
  fullName: EfLight.Core.EfLightOptions.DefaultLifetime
  nameWithType: EfLightOptions.DefaultLifetime
- uid: EfLight.Core.LightRepository`1
  name: LightRepository<TContext>
  href: documentation/api/EfLight.Core.LightRepository-1.html
  commentId: T:EfLight.Core.LightRepository`1
  name.vb: LightRepository(Of TContext)
  fullName: EfLight.Core.LightRepository<TContext>
  fullName.vb: EfLight.Core.LightRepository(Of TContext)
  nameWithType: LightRepository<TContext>
  nameWithType.vb: LightRepository(Of TContext)
- uid: EfLight.Core.LightRepository`1.#ctor(`0)
  name: LightRepository(TContext)
  href: documentation/api/EfLight.Core.LightRepository-1.html#EfLight_Core_LightRepository_1__ctor__0_
  commentId: M:EfLight.Core.LightRepository`1.#ctor(`0)
  name.vb: New(TContext)
  fullName: EfLight.Core.LightRepository<TContext>.LightRepository(TContext)
  fullName.vb: EfLight.Core.LightRepository(Of TContext).New(TContext)
  nameWithType: LightRepository<TContext>.LightRepository(TContext)
  nameWithType.vb: LightRepository(Of TContext).New(TContext)
- uid: EfLight.Core.LightRepository`1.#ctor*
  name: LightRepository
  href: documentation/api/EfLight.Core.LightRepository-1.html#EfLight_Core_LightRepository_1__ctor_
  commentId: Overload:EfLight.Core.LightRepository`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EfLight.Core.LightRepository<TContext>.LightRepository
  fullName.vb: EfLight.Core.LightRepository(Of TContext).New
  nameWithType: LightRepository<TContext>.LightRepository
  nameWithType.vb: LightRepository(Of TContext).New
- uid: EfLight.Core.LightRepository`1._context
  name: _context
  href: documentation/api/EfLight.Core.LightRepository-1.html#EfLight_Core_LightRepository_1__context
  commentId: F:EfLight.Core.LightRepository`1._context
  fullName: EfLight.Core.LightRepository<TContext>._context
  fullName.vb: EfLight.Core.LightRepository(Of TContext)._context
  nameWithType: LightRepository<TContext>._context
  nameWithType.vb: LightRepository(Of TContext)._context
- uid: EfLight.Core.PagingAndSortingRepository`3
  name: PagingAndSortingRepository<TContext, TEntity, TKey>
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html
  commentId: T:EfLight.Core.PagingAndSortingRepository`3
  name.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey)
- uid: EfLight.Core.PagingAndSortingRepository`3.#ctor(`0)
  name: PagingAndSortingRepository(TContext)
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3__ctor__0_
  commentId: M:EfLight.Core.PagingAndSortingRepository`3.#ctor(`0)
  name.vb: New(TContext)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.PagingAndSortingRepository(TContext)
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).New(TContext)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.PagingAndSortingRepository(TContext)
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).New(TContext)
- uid: EfLight.Core.PagingAndSortingRepository`3.#ctor*
  name: PagingAndSortingRepository
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3__ctor_
  commentId: Overload:EfLight.Core.PagingAndSortingRepository`3.#ctor
  isSpec: "True"
  name.vb: New
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.PagingAndSortingRepository
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).New
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.PagingAndSortingRepository
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).New
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAll(EfLight.Common.PaginationRequest,System.Boolean)
  name: FindAll(PaginationRequest, bool)
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAll_EfLight_Common_PaginationRequest_System_Boolean_
  commentId: M:EfLight.Core.PagingAndSortingRepository`3.FindAll(EfLight.Common.PaginationRequest,System.Boolean)
  name.vb: FindAll(PaginationRequest, Boolean)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll(EfLight.Common.PaginationRequest, bool)
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll(EfLight.Common.PaginationRequest, Boolean)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll(PaginationRequest, bool)
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll(PaginationRequest, Boolean)
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAll(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean)
  name: FindAll(PaginationRequest, Expression<Func<TEntity, bool>>, bool)
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAll_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___System_Boolean_
  commentId: M:EfLight.Core.PagingAndSortingRepository`3.FindAll(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean)
  name.vb: FindAll(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Boolean)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, bool)
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), Boolean)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll(PaginationRequest, Expression<Func<TEntity, bool>>, bool)
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Boolean)
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAll(System.Boolean)
  name: FindAll(bool)
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAll_System_Boolean_
  commentId: M:EfLight.Core.PagingAndSortingRepository`3.FindAll(System.Boolean)
  name.vb: FindAll(Boolean)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll(bool)
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll(Boolean)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll(bool)
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll(Boolean)
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAll*
  name: FindAll
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAll_
  commentId: Overload:EfLight.Core.PagingAndSortingRepository`3.FindAll
  isSpec: "True"
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAllAsync(EfLight.Common.PaginationRequest,System.Boolean,System.Threading.CancellationToken)
  name: FindAllAsync(PaginationRequest, bool, CancellationToken)
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAllAsync_EfLight_Common_PaginationRequest_System_Boolean_System_Threading_CancellationToken_
  commentId: M:EfLight.Core.PagingAndSortingRepository`3.FindAllAsync(EfLight.Common.PaginationRequest,System.Boolean,System.Threading.CancellationToken)
  name.vb: FindAllAsync(PaginationRequest, Boolean, CancellationToken)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync(EfLight.Common.PaginationRequest, bool, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync(EfLight.Common.PaginationRequest, Boolean, System.Threading.CancellationToken)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync(PaginationRequest, bool, CancellationToken)
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync(PaginationRequest, Boolean, CancellationToken)
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAllAsync(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean,System.Threading.CancellationToken)
  name: FindAllAsync(PaginationRequest, Expression<Func<TEntity, bool>>, bool, CancellationToken)
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAllAsync_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___System_Boolean_System_Threading_CancellationToken_
  commentId: M:EfLight.Core.PagingAndSortingRepository`3.FindAllAsync(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean,System.Threading.CancellationToken)
  name.vb: FindAllAsync(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Boolean, CancellationToken)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, bool, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), Boolean, System.Threading.CancellationToken)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync(PaginationRequest, Expression<Func<TEntity, bool>>, bool, CancellationToken)
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Boolean, CancellationToken)
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAllAsync(System.Boolean,System.Threading.CancellationToken)
  name: FindAllAsync(bool, CancellationToken)
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAllAsync_System_Boolean_System_Threading_CancellationToken_
  commentId: M:EfLight.Core.PagingAndSortingRepository`3.FindAllAsync(System.Boolean,System.Threading.CancellationToken)
  name.vb: FindAllAsync(Boolean, CancellationToken)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync(bool, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync(Boolean, System.Threading.CancellationToken)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync(bool, CancellationToken)
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync(Boolean, CancellationToken)
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAllAsync*
  name: FindAllAsync
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAllAsync_
  commentId: Overload:EfLight.Core.PagingAndSortingRepository`3.FindAllAsync
  isSpec: "True"
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAllAsync``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,``0}},EfLight.Common.SortDirection,System.Boolean,System.Threading.CancellationToken)
  name: FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken)
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAllAsync__1_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___System_Linq_Expressions_Expression_System_Func__1___0___EfLight_Common_SortDirection_System_Boolean_System_Threading_CancellationToken_
  commentId: M:EfLight.Core.PagingAndSortingRepository`3.FindAllAsync``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,``0}},EfLight.Common.SortDirection,System.Boolean,System.Threading.CancellationToken)
  name.vb: FindAllAsync(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean, CancellationToken)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync<TOrderKey>(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TOrderKey>>, EfLight.Common.SortDirection, bool, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync(Of TOrderKey)(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TOrderKey)), EfLight.Common.SortDirection, Boolean, System.Threading.CancellationToken)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken)
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean, CancellationToken)
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAllAsync``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,``0}},EfLight.Common.SortDirection,System.Boolean,System.Threading.CancellationToken)
  name: FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken)
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAllAsync__1_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__1___0___EfLight_Common_SortDirection_System_Boolean_System_Threading_CancellationToken_
  commentId: M:EfLight.Core.PagingAndSortingRepository`3.FindAllAsync``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,``0}},EfLight.Common.SortDirection,System.Boolean,System.Threading.CancellationToken)
  name.vb: FindAllAsync(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean, CancellationToken)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync<TOrderKey>(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, TOrderKey>>, EfLight.Common.SortDirection, bool, System.Threading.CancellationToken)
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync(Of TOrderKey)(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TOrderKey)), EfLight.Common.SortDirection, Boolean, System.Threading.CancellationToken)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAllAsync<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool, CancellationToken)
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAllAsync(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean, CancellationToken)
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAll``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,``0}},EfLight.Common.SortDirection,System.Boolean)
  name: FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool)
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAll__1_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__1_System_Boolean___System_Linq_Expressions_Expression_System_Func__1___0___EfLight_Common_SortDirection_System_Boolean_
  commentId: M:EfLight.Core.PagingAndSortingRepository`3.FindAll``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,``0}},EfLight.Common.SortDirection,System.Boolean)
  name.vb: FindAll(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll<TOrderKey>(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, bool>>, System.Linq.Expressions.Expression<System.Func<TEntity, TOrderKey>>, EfLight.Common.SortDirection, bool)
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll(Of TOrderKey)(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TOrderKey)), EfLight.Common.SortDirection, Boolean)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, bool>>, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool)
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean)
- uid: EfLight.Core.PagingAndSortingRepository`3.FindAll``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,``0}},EfLight.Common.SortDirection,System.Boolean)
  name: FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool)
  href: documentation/api/EfLight.Core.PagingAndSortingRepository-3.html#EfLight_Core_PagingAndSortingRepository_3_FindAll__1_EfLight_Common_PaginationRequest_System_Linq_Expressions_Expression_System_Func__1___0___EfLight_Common_SortDirection_System_Boolean_
  commentId: M:EfLight.Core.PagingAndSortingRepository`3.FindAll``1(EfLight.Common.PaginationRequest,System.Linq.Expressions.Expression{System.Func{`1,``0}},EfLight.Common.SortDirection,System.Boolean)
  name.vb: FindAll(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean)
  fullName: EfLight.Core.PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll<TOrderKey>(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression<System.Func<TEntity, TOrderKey>>, EfLight.Common.SortDirection, bool)
  fullName.vb: EfLight.Core.PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll(Of TOrderKey)(EfLight.Common.PaginationRequest, System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TOrderKey)), EfLight.Common.SortDirection, Boolean)
  nameWithType: PagingAndSortingRepository<TContext, TEntity, TKey>.FindAll<TOrderKey>(PaginationRequest, Expression<Func<TEntity, TOrderKey>>, SortDirection, bool)
  nameWithType.vb: PagingAndSortingRepository(Of TContext, TEntity, TKey).FindAll(Of TOrderKey)(PaginationRequest, Expression(Of Func(Of TEntity, TOrderKey)), SortDirection, Boolean)
- uid: EfLight.Extensions
  name: EfLight.Extensions
  href: documentation/api/EfLight.Extensions.html
  commentId: N:EfLight.Extensions
  fullName: EfLight.Extensions
  nameWithType: EfLight.Extensions
- uid: EfLight.Extensions.Object
  name: Object
  href: documentation/api/EfLight.Extensions.Object.html
  commentId: T:EfLight.Extensions.Object
  fullName: EfLight.Extensions.Object
  nameWithType: Object
- uid: EfLight.Extensions.Object.ToOption*
  name: ToOption
  href: documentation/api/EfLight.Extensions.Object.html#EfLight_Extensions_Object_ToOption_
  commentId: Overload:EfLight.Extensions.Object.ToOption
  isSpec: "True"
  fullName: EfLight.Extensions.Object.ToOption
  nameWithType: Object.ToOption
- uid: EfLight.Extensions.Object.ToOption``1(``0)
  name: ToOption<T>(T?)
  href: documentation/api/EfLight.Extensions.Object.html#EfLight_Extensions_Object_ToOption__1___0_
  commentId: M:EfLight.Extensions.Object.ToOption``1(``0)
  name.vb: ToOption(Of T)(T)
  fullName: EfLight.Extensions.Object.ToOption<T>(T?)
  fullName.vb: EfLight.Extensions.Object.ToOption(Of T)(T)
  nameWithType: Object.ToOption<T>(T?)
  nameWithType.vb: Object.ToOption(Of T)(T)
- uid: EfLight.Extensions.ServicesCollection
  name: ServicesCollection
  href: documentation/api/EfLight.Extensions.ServicesCollection.html
  commentId: T:EfLight.Extensions.ServicesCollection
  fullName: EfLight.Extensions.ServicesCollection
  nameWithType: ServicesCollection
- uid: EfLight.Extensions.ServicesCollection.AddEfLight*
  name: AddEfLight
  href: documentation/api/EfLight.Extensions.ServicesCollection.html#EfLight_Extensions_ServicesCollection_AddEfLight_
  commentId: Overload:EfLight.Extensions.ServicesCollection.AddEfLight
  isSpec: "True"
  fullName: EfLight.Extensions.ServicesCollection.AddEfLight
  nameWithType: ServicesCollection.AddEfLight
- uid: EfLight.Extensions.ServicesCollection.AddEfLight``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{EfLight.Core.EfLightOptions})
  name: AddEfLight<TAssembly>(IServiceCollection, Action<EfLightOptions>?)
  href: documentation/api/EfLight.Extensions.ServicesCollection.html#EfLight_Extensions_ServicesCollection_AddEfLight__1_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Action_EfLight_Core_EfLightOptions__
  commentId: M:EfLight.Extensions.ServicesCollection.AddEfLight``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{EfLight.Core.EfLightOptions})
  name.vb: AddEfLight(Of TAssembly)(IServiceCollection, Action(Of EfLightOptions))
  fullName: EfLight.Extensions.ServicesCollection.AddEfLight<TAssembly>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<EfLight.Core.EfLightOptions>?)
  fullName.vb: EfLight.Extensions.ServicesCollection.AddEfLight(Of TAssembly)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of EfLight.Core.EfLightOptions))
  nameWithType: ServicesCollection.AddEfLight<TAssembly>(IServiceCollection, Action<EfLightOptions>?)
  nameWithType.vb: ServicesCollection.AddEfLight(Of TAssembly)(IServiceCollection, Action(Of EfLightOptions))
